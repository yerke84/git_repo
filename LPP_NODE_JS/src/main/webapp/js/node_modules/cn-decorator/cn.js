'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _bemCnFast = require('bem-cn-fast');

var _bemCnFast2 = _interopRequireDefault(_bemCnFast);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

/**
 * BEM class name factory.
 *
 * @typedef {Function} BemCn
 * @param {String|Object} [elementOrMods] Element name or hash object with mods.
 * @param {Object} [mods] Hash object with mods.
 * @returns {String}
 */

/**
 * Extends `BemCn` factory with additional class proxy and theme.
 *
 * @param {BemCn} cn BemCn instance.
 * @param {String} className Additional class name.
 * @param {String} theme Theme name.
 * @returns {BemCn}
 */
function getFunctionCn(cn, className, theme) {
    var resultCn = function resultCn() {
        var blockSelector = false;

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        if (typeof args[0] === 'undefined' || _typeof(args[0]) === 'object') {
            if (args.length === 0) {
                if (process.env.NODE_ENV !== 'production') {
                    // eslint-disable-next-line no-console
                    console.warn('Performance: cn() without arguments should be called without parentheses');
                }

                args.push({});
            }

            args[0].theme = theme;
            blockSelector = true;
        }

        return cn.apply(cn, args) + (blockSelector && className ? ' ' + className : '');
    };

    resultCn.toString = function () {
        return cn({ theme: theme }).toString() + (className ? ' ' + className : '');
    };

    return resultCn;
}

/**
 * 1. Decorates `React.Component`. Extends `render` method for
 * apply as first argument `BemCn` instance that uses to
 * generate BEM class names.
 *
 * 2. Adds prop `theme`.
 *
 * 3. Adds prop `className` for provide additional `className`.
 *
 * @example
 * ```
 *     import cnDecorator from 'cn-decorator';
 *     const cn = cnDecorator.create(['on-color', 'on-white']);
 *
 *     \@cn('my-block')
 *     class MyBlock extends React.Component {
 *          render(cn) {
 *              return (
 *                  <div className={ cn } />
 *              );
 *          }
 *     }
 * ```
 *
 * Render result:
 *
 * ```
 *     <MyBlock />
 *     // <div class="my-block my-block_theme_on-color"></div>
 *
 *     <MyBlock theme="on-white" />
 *     // <div class="my-block my-block_theme_on-white"></div>
 *
 *     <MyBlock className="additional-class" />
 *     // <div class="my-block my-block_theme_on-color additional-class"></div>
 * ```
 *
 * You can `CnDecorator` as dependency injector to flexibale change component\'s composition.
 *
 * ```
 * // phone-input.jsx
 *
 * import cn from 'cn-decorator';
 * import Input from 'input';
 * import './input.css';
 *
 * // Source component with base BEM class name `phone-input` and composed `Input` component.
 * \@cn('phone-input', Input)
 * class PhoneInput extends React.Component {
 *     render(cn, Input) {
 *          return <Input className={ cn } />;
 *     }
 * }
 *
 * // my-phone-input.jsx
 *
 * import cn from 'cn-decorator'
 * import PhoneInput from 'phone-input';
 * import MyInput from 'my-input';
 * import './my-phone-input.css';
 *
 * // Extended component with base class name `my-phone-input`.
 * // Uses custom `MyInput` component inside.
 * \@cn('my-phone-input', MyInput)
 * class MyPhoneInput extends PhoneInput {}
 * ```
 *
 * @typedef {Function} CnDecorator
 * @param {String} componentName Base CSS class name.
 * @param {...Function} [components] DI components.
 * @returns {Function}
 */

/**
 * Factory `CnDecorator`.
 *
 * @param {Array.<String>} [themes] Optional themes list. Uses first theme as default.
 * @returns {CnDecorator}
 */
function create(themes) {
    function cn(componentName) {
        for (var _len2 = arguments.length, components = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
            components[_key2 - 1] = arguments[_key2];
        }

        return function (target) {
            target._cn = (0, _bemCnFast2.default)(componentName);
            target._cnComponents = components;

            if (!target.prototype.hasOwnProperty('render')) {
                return;
            }

            if (target.prototype.render.length === 0 && process.env.NODE_ENV !== 'production') {
                throw new Error('Couldn\'t decorate ' + componentName + ' because render method should contain at least one argument');
            }

            if (target.prototype.render.length >= 1) {
                target.contextTypes = _extends({}, target.contextTypes, {
                    theme: _propTypes2.default.string
                });

                target.childContextTypes = _extends({}, target.childContextTypes, {
                    theme: _propTypes2.default.string
                });

                var originalRender = target.prototype.render;
                target.prototype.render = function () {
                    var currentClassName = this.props.className;
                    var currentTheme = this.props.theme || this.context.theme || themes && themes[0];

                    if (!this._cnArgs || this._oldClassName !== currentClassName || this._oldTheme !== currentTheme) {
                        this._cnArgs = [getFunctionCn(this.constructor._cn, currentClassName, currentTheme)].concat(_toConsumableArray(this.constructor._cnComponents));

                        this._oldClassName = currentClassName;
                        this._oldTheme = currentTheme;
                    }
                    return originalRender.apply(this, this._cnArgs);
                };
            }
        };
    }

    cn.create = create;

    return cn;
}

exports.default = create();
//# sourceMappingURL=cn.js.map
