{"version":3,"sources":["select/select.jsx"],"names":["Select","state","buttonFocused","hasGroup","nativeFocused","opened","props","popupStyles","value","setState","options","some","option","type","content","popup","setTarget","button","getNode","updatePopupStyles","nextProps","disabled","toggleOpened","cn","Popup","getValue","mode","size","width","checked","length","focused","getFocused","invalid","error","root","name","id","renderButton","renderNativeSelect","hint","renderPopup","renderButtonContent","handleButtonClick","handleButtonFocus","handleButtonBlur","isCheckMode","hasEmptyOptGroup","hasEmptyOption","nativeSelect","native","handleNativeOptionCheck","handleNativeClick","handleNativeFocus","handleNativeBlur","placeholder","renderNativeOptionsList","optionsList","renderOptionsList","getOpened","directions","handleClickOutside","minWidth","maxWidth","menu","handleOptionCheck","handleMenuFocus","handleMenuBlur","handleMenuKeyDown","map","title","description","text","icon","groupKey","nativeText","checkedItems","getCheckedItems","checkedItemsText","item","checkedText","join","event","onClick","which","ENTER","SPACE","onKeyDown","onButtonFocus","getRevisedEvent","onButtonBlur","target","onFocus","onMenuFocus","onBlur","onMenuBlur","newOpened","focus","onChange","getFlattenedPropOptions","result","forEach","findInGroup","concat","push","domOptions","Array","from","currentTarget","filter","index","flattenedPropOptions","reduce","selected","blur","onClickOutside","highlightedItem","DOWN_ARROW","UP_ARROW","preventDefault","syncKeyboardNavigationWithScroll","focusOnMenu","ESCAPE","document","activeElement","elementRect","getBoundingClientRect","targetY","top","window","pageYOffset","scrollContainer","getScrollContainer","posX","scrollTop","posY","scrollLeft","element","container","getInnerNode","correction","offsetHeight","offsetTop","duration","newOpenedState","buttonWidth","equalPopupWidth","indexOf","undefined","context","positioningContainerElement","body","Component","propTypes","className","oneOfType","func","string","oneOf","arrayOf","bool","number","shape","node","array","theme","defaultProps","contextTypes"],"mappings":";;;;;;;;;;kEAAA;;;;AAIA;;AACA;;;;AACA;;;;AACA;;;;AAEA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AAEA;;;;AACA;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA;;;;;;;;AAQA;;;IAKMA,M,WAFL,kBAAG,QAAH,kB,UACA,2BAAY,IAAZ,C;;;;;;;;;;;;;;0LAoGGC,K,GAAQ;AACJC,2BAAe,KADX;AAEJC,sBAAU,KAFN;AAGJC,2BAAe,KAHX;AAIJC,oBAAQ,CAAC,CAAC,MAAKC,KAAL,CAAWD,MAJjB;AAKJE,yBAAa,EALT;AAMJC,mBAAO,MAAKF,KAAL,CAAWE,KAAX,IAAoB;AANvB,S;;;AASR;;;;;AAKA;;;;;AAKA;;;;;AAKA;;;;;;;6CAKqB;AACjB,iBAAKC,QAAL,CAAc;AACVN,0BAAU,KAAKG,KAAL,CAAWI,OAAX,CAAmBC,IAAnB,CAAwB;AAAA,2BAAU,CAAC,EAAEC,OAAOC,IAAP,KAAgB,OAAhB,IAA2B,CAAC,CAACD,OAAOE,OAAtC,CAAX;AAAA,iBAAxB;AADA,aAAd;AAGH;;;4CAEmB;AAChB,iBAAKC,KAAL,CAAWC,SAAX,CAAqB,KAAKC,MAAL,CAAYC,OAAZ,EAArB;AACA,iBAAKC,iBAAL;AACH;;;kDAEyBC,S,EAAW;AACjC,gBAAI,KAAKnB,KAAL,CAAWI,MAAX,IAAqBe,UAAUC,QAAnC,EAA6C;AACzC,qBAAKC,YAAL;AACH;;AAED,iBAAKb,QAAL,CAAc;AACVN,0BAAU,KAAKG,KAAL,CAAWI,OAAX,CAAmBC,IAAnB,CAAwB;AAAA,2BAAU,CAAC,EAAEC,OAAOC,IAAP,KAAgB,OAAhB,IAA2B,CAAC,CAACD,OAAOE,OAAtC,CAAX;AAAA,iBAAxB;AADA,aAAd;AAGH;;;+BAEMS,E,EAAIC,K,EAAO;AAAA;;AACd,gBAAIhB,QAAQ,KAAKiB,QAAL,EAAZ;;AAEA,mBACI;AAAA;AAAA;AACI,+BAAYF,GAAG;AACXG,8BAAM,KAAKpB,KAAL,CAAWoB,IADN;AAEXC,8BAAM,KAAKrB,KAAL,CAAWqB,IAFN;AAGXC,+BAAO,KAAKtB,KAAL,CAAWsB,KAHP;AAIXP,kCAAU,KAAKf,KAAL,CAAWe,QAJV;AAKXQ,iCAAS,KAAKvB,KAAL,CAAWoB,IAAX,KAAoB,OAApB,IAA+BlB,MAAMsB,MAAN,GAAe,CAL5C;AAMXC,iCAAS,KAAKC,UAAL,EANE;AAOXC,iCAAS,CAAC,CAAC,KAAK3B,KAAL,CAAW4B;AAPX,qBAAH,CADhB;AAUI,yBAAM,aAACC,IAAD,EAAU;AAAE,+BAAKA,IAAL,GAAYA,IAAZ;AAAmB;AAVzC;AAYI;AAAA;AAAA,sBAAM,WAAYZ,GAAG,OAAH,CAAlB;AACI;AACI,8BAAK,QADT;AAEI,8BAAO,KAAKjB,KAAL,CAAW8B,IAFtB;AAGI,4BAAK,KAAK9B,KAAL,CAAW+B,EAHpB;AAII,+BAAQ7B;AAJZ,sBADJ;AAOM,yBAAK8B,YAAL,CAAkBf,EAAlB,CAPN;AAQM,yBAAKgB,kBAAL,CAAwBhB,EAAxB,CARN;AAUQ,qBAAC,KAAKjB,KAAL,CAAW4B,KAAX,IAAoB,KAAK5B,KAAL,CAAWkC,IAAhC,KACA;AAAA;AAAA,0BAAM,WAAYjB,GAAG,KAAH,CAAlB;AACM,6BAAKjB,KAAL,CAAW4B,KAAX,IAAoB,KAAK5B,KAAL,CAAWkC;AADrC,qBAXR;AAeM,yBAAKC,WAAL,CAAiBlB,EAAjB,EAAqBC,KAArB;AAfN;AAZJ,aADJ;AAgCH;;;qCAEYD,E,EAAI;AAAA;;AACb,mBACI;AACI,2BAAYA,GAAG,QAAH,CADhB;AAEI,sBAAO,KAAKjB,KAAL,CAAWqB,IAFtB;AAGI,qBAAM,aAACV,MAAD,EAAY;AAAE,2BAAKA,MAAL,GAAcA,MAAd;AAAuB,iBAH/C;AAII,0BAAW,KAAKX,KAAL,CAAWe,QAJ1B;AAKI,sBAAO,KAAKqB,mBAAL,EALX;AAMI,6BAAc,CACV;AACI,yBAAI,YADR;AAEI,+BAAYnB,GAAG,MAAH;AAFhB,kBADU,EAKV,wDAAc,KAAI,cAAlB,EAAiC,UAAW,KAAKJ,iBAAjD,GALU,CANlB;AAaI,yBAAU,KAAKwB,iBAbnB;AAcI,yBAAU,KAAKC,iBAdnB;AAeI,wBAAS,KAAKC;AAflB,cADJ;AAmBH;;;2CAEkBtB,E,EAAI;AAAA;;AACnB,gBAAIuB,cAAc,KAAKxC,KAAL,CAAWoB,IAAX,KAAoB,OAAtC;AACA,gBAAIqB,mBAAmBD,eAAe,KAAK7C,KAAL,CAAWE,QAAjD;AACA,gBAAI6C,iBAAiB,CAACF,WAAD,IAAgB,CAAC,KAAK7C,KAAL,CAAWE,QAAjD;AACA,gBAAIK,QAAQ,KAAKiB,QAAL,EAAZ;;AAEA,gBAAI,CAACqB,WAAL,EAAkB;AACdtC,wBAAQA,MAAMsB,MAAN,GAAetB,MAAM,CAAN,CAAf,GAA0B,EAAlC;AACH;;AAED,mBACI;AAAA;AAAA;AACI,2BAAM,cADV;AAEI,2BAAQ;AAFZ;AAII;AAAA;AAAA;AACI,6BAAM,aAACyC,YAAD,EAAkB;AAAE,mCAAKA,YAAL,GAAoBA,YAApB;AAAmC,yBADjE;AAEI,mCAAY1B,GAAG,EAAE2B,QAAQ,IAAV,EAAH,CAFhB;AAGI,kCAAW,KAAK5C,KAAL,CAAWe,QAH1B;AAII,kCAAWyB,eAAe,UAJ9B;AAKI,+BAAQtC,KALZ;AAMI,kCAAW,KAAK2C,uBANpB;AAOI,iCAAU,KAAKC,iBAPnB;AAQI,iCAAU,KAAKC,iBARnB;AASI,gCAAS,KAAKC;AATlB;;AAYQ;;;;;;;;;AASAP,wCACA;AACI,kCAAW,IADf;AAEI,+BAAQ,KAAKzC,KAAL,CAAWiD;AAFvB,sBAtBR;AA4BQP,sCACA;AAAA;AAAA,0BAAQ,UAAW,IAAnB,EAA0B,OAAM,EAAhC;AACM,6BAAK1C,KAAL,CAAWiD;AADjB,qBA7BR;AAiCM,yBAAKC,uBAAL,CAA6B,KAAKlD,KAAL,CAAWI,OAAxC;AAjCN;AAJJ,aADJ;AA0CH;;;oCAEWa,E,EAAIC,K,EAAO;AAAA;;AACnB,gBAAIiC,cAAc,KAAKC,iBAAL,CAAuB,KAAKpD,KAAL,CAAWI,OAAlC,CAAlB;AACA,gBAAIL,SAAS,KAAKsD,SAAL,EAAb;AACA,gBAAInD,QAAQ,KAAKiB,QAAL,EAAZ;;AAEA,mBACI;AAAC,qBAAD;AAAA;AACI,yBAAI,OADR;AAEI,yBAAM,aAACV,KAAD,EAAW;AAAE,+BAAKA,KAAL,GAAaA,KAAb;AAAqB,qBAF5C;AAGI,2BAAM,KAAKT,KAAL,CAAW8B,IAHrB;AAII,kCAAe,IAJnB;AAKI,+BAAYb,GAAG,OAAH,CALhB;AAMI,gCAAa,KAAKjB,KAAL,CAAWsD,UAN5B;AAOI,4BAAO,UAPX;AAQI,4BAAS,KARb;AASI,0BAAO,KAAKtD,KAAL,CAAWqB,IATtB;AAUI,4BAAO,QAVX;AAWI,6BAAUtB,MAXd;AAYI,oCAAiB,KAAKwD,kBAZ1B;AAaI,8BAAW,KAAK5D,KAAL,CAAWM,WAAX,CAAuBuD,QAbtC;AAcI,8BAAW,KAAK7D,KAAL,CAAWM,WAAX,CAAuBwD;AAdtC;AAgBI;AACI,yBAAM,aAACC,IAAD,EAAU;AAAE,+BAAKA,IAAL,GAAYA,IAAZ;AAAmB,qBADzC;AAEI,+BAAYzC,GAAG,MAAH,CAFhB;AAGI,0BAAO,KAAKjB,KAAL,CAAWqB,IAHtB;AAII,8BAAW,KAAKrB,KAAL,CAAWe,QAJ1B;AAKI,0BAAO,KAAKf,KAAL,CAAWoB,IALtB;AAMI,6BAAU+B,WANd;AAOI,iCAAc,KAAKQ,iBAPvB;AAQI,kCAAezD,KARnB;AASI,6BAAU,KAAK0D,eATnB;AAUI,4BAAS,KAAKC,cAVlB;AAWI,+BAAY,KAAKC;AAXrB;AAhBJ,aADJ;AAgCH;;;0CAEiB1D,O,EAAS;AAAA;;AACvB,mBACIA,QAAQ2D,GAAR,CAAY,UAACzD,MAAD,EAAY;AACpB,oBAAIA,OAAOC,IAAP,KAAgB,OAAhB,IAA2B,CAAC,CAACD,OAAOE,OAAxC,EAAiD;AAC7C,wBAAIA,WAAU,OAAK4C,iBAAL,CAAuB9C,OAAOE,OAA9B,CAAd;;AAEA,2BAAQ;AACJD,8BAAM,OADF;AAEJyD,+BAAO1D,OAAO0D,KAFV;AAGJxD;AAHI,qBAAR;AAKH;;AAED,oBAAIA,UAAUF,OAAO2D,WAAP,IAAsB3D,OAAO4D,IAA3C;;AAEA,uBAAQ;AACJhE,2BAAOI,OAAOJ,KADV;AAEJM,6BAAS,yCAAe,EAAE2D,MAAM7D,OAAO6D,IAAf,EAAqB3D,gBAArB,EAAf;AAFL,iBAAR;AAIH,aAjBD,CADJ;AAoBH;;;gDAEuBJ,O,EAAS;AAAA;;AAC7B,gBAAIgE,WAAW,CAAf;;AAEA,mBACIhE,QAAQ2D,GAAR,CAAY,UAACzD,MAAD,EAAY;AACpB,oBAAIA,OAAOC,IAAP,KAAgB,OAAhB,IAA2B,CAAC,CAACD,OAAOE,OAAxC,EAAiD;AAC7C,wBAAIA,UAAU,OAAK0C,uBAAL,CAA6B5C,OAAOE,OAApC,CAAd;;AAEA4D,gCAAY,CAAZ;;AAEA,2BACI;AAAA;AAAA;AACI,4CAAeA,QADnB;AAEI,mCAAQ9D,OAAO0D;AAFnB;AAIMxD;AAJN,qBADJ;AAQH;;AAED,uBACI;AAAA;AAAA;AACI,6BAAMF,OAAOJ,KADjB;AAEI,+BAAQI,OAAOJ;AAFnB;AAIMI,2BAAO+D,UAAP,IAAqB/D,OAAO4D;AAJlC,iBADJ;AAQH,aAxBD,CADJ;AA2BH;;;8CAEqB;AAClB,gBAAII,eAAe,KAAKC,eAAL,CAAqB,KAAKvE,KAAL,CAAWI,OAAhC,CAAnB;;AAEA,gBAAI,KAAKJ,KAAL,CAAWoC,mBAAf,EAAoC;AAChC,uBAAO,KAAKpC,KAAL,CAAWoC,mBAAX,CAA+BkC,YAA/B,CAAP;AACH;;AAED,gBAAIE,mBAAmBF,aAAaP,GAAb,CAAiB;AAAA,uBAAQU,KAAKC,WAAL,IAAoBD,KAAKP,IAAjC;AAAA,aAAjB,EAAwDS,IAAxD,CAA6D,IAA7D,CAAvB;AACA,mBAAOH,oBAAoB,KAAKxE,KAAL,CAAWiD,WAAtC;AACH;;;0CAGiB2B,K,EAAO;AACrB,gBAAI,CAAC,KAAK5E,KAAL,CAAWe,QAAhB,EAA0B;AACtB,qBAAKC,YAAL;AACH;;AAED,gBAAI,KAAKhB,KAAL,CAAW6E,OAAf,EAAwB;AACpB,qBAAK7E,KAAL,CAAW6E,OAAX,CAAmBD,KAAnB;AACH;AACJ;;;4CAGmBA,K,EAAO;AACvB,gBAAI,CAAC,KAAK5E,KAAL,CAAWe,QAAhB,EAA0B;AACtB,oBAAI6D,MAAME,KAAN,KAAgB,uBAAaC,KAA7B,IAAsCH,MAAME,KAAN,KAAgB,uBAAaE,KAAvE,EAA8E;AAC1E,yBAAKhE,YAAL;AACH;AACJ;;AAED,gBAAI,KAAKhB,KAAL,CAAWiF,SAAf,EAA0B;AACtB,qBAAKjF,KAAL,CAAWiF,SAAX,CAAqBL,KAArB;AACH;AACJ;;;0CAGiBA,K,EAAO;AACrB,iBAAKzE,QAAL,CAAc,EAAEP,eAAe,IAAjB,EAAd;;AAEA,gBAAI,KAAKI,KAAL,CAAWkF,aAAf,EAA8B;AAC1B,qBAAKlF,KAAL,CAAWkF,aAAX,CAAyB,KAAKC,eAAL,CAAqBP,KAArB,CAAzB;AACH;AACJ;;;yCAGgBA,K,EAAO;AACpB,iBAAKzE,QAAL,CAAc,EAAEP,eAAe,KAAjB,EAAd;;AAEA,gBAAI,KAAKI,KAAL,CAAWoF,YAAf,EAA6B;AACzB,qBAAKpF,KAAL,CAAWoF,YAAX,CAAwB,KAAKD,eAAL,CAAqBP,KAArB,CAAxB;AACH;AACJ;;;wCAGeA,K,EAAO;AACnBA,kBAAMS,MAAN,CAAanF,KAAb,GAAqB,KAAKiB,QAAL,EAArB;;AAEA,gBAAI,KAAKnB,KAAL,CAAWsF,OAAf,EAAwB;AACpB,qBAAKtF,KAAL,CAAWsF,OAAX,CAAmBV,KAAnB;AACH;;AAED,gBAAI,KAAK5E,KAAL,CAAWuF,WAAf,EAA4B;AACxB,qBAAKvF,KAAL,CAAWuF,WAAX,CAAuBX,KAAvB;AACH;AACJ;;;uCAGcA,K,EAAO;AAClB,iBAAKzE,QAAL,CAAc;AACVJ,wBAAQ;AADE,aAAd;;AAIA6E,kBAAMS,MAAN,CAAanF,KAAb,GAAqB,KAAKiB,QAAL,EAArB;;AAEA,gBAAI,KAAKnB,KAAL,CAAWwF,MAAf,EAAuB;AACnB,qBAAKxF,KAAL,CAAWwF,MAAX,CAAkBZ,KAAlB;AACH;;AAED,gBAAI,KAAK5E,KAAL,CAAWyF,UAAf,EAA2B;AACvB,qBAAKzF,KAAL,CAAWyF,UAAX,CAAsBb,KAAtB;AACH;AACJ;;;0CAGiB1E,K,EAAO;AAAA;;AACrB,gBAAIH,SAAS,KAAKsD,SAAL,EAAb;;AAEA,iBAAKlD,QAAL,CACI,EAAED,YAAF,EAASH,QAAQ,KAAKC,KAAL,CAAWoB,IAAX,KAAoB,OAArC,EADJ,EAEI,YAAM;AACF;AACA;AACA;AACA,oBAAIsE,YAAY,OAAKrC,SAAL,EAAhB;AACA,oBAAI,CAACqC,SAAD,IAAc3F,WAAW2F,SAA7B,EAAwC;AACpC,2BAAK/E,MAAL,CAAYgF,KAAZ;AACH;AACJ,aAVL;;AAaA,gBAAI,KAAK3F,KAAL,CAAW4F,QAAf,EAAyB;AACrB,qBAAK5F,KAAL,CAAW4F,QAAX,CAAoB1F,KAApB;AACH;AACJ;;;gDAGuB0E,K,EAAO;AAC3B,qBAASiB,uBAAT,CAAiCzF,OAAjC,EAA0C;AACtC,oBAAI0F,SAAS,EAAb;;AAEA1F,wBAAQ2F,OAAR,CAAgB,UAACzF,MAAD,EAAY;AACxB,wBAAIA,OAAOC,IAAP,KAAgB,OAAhB,IAA2B,CAAC,CAACD,OAAOE,OAAxC,EAAiD;AAC7C,4BAAIwF,cAAcH,wBAAwBvF,OAAOE,OAA/B,CAAlB;AACAsF,iCAASA,OAAOG,MAAP,CAAcD,WAAd,CAAT;AACH,qBAHD,MAGO;AACHF,+BAAOI,IAAP,CAAY5F,MAAZ;AACH;AACJ,iBAPD;;AASA,uBAAOwF,MAAP;AACH;;AAED,gBAAIpD,iBAAiB,KAAK1C,KAAL,CAAWoB,IAAX,KAAoB,OAApB,IAA+B,CAAC,KAAKzB,KAAL,CAAWE,QAAhE;AACA,gBAAIsG,aAAaC,MAAMC,IAAN,CAAWzB,MAAM0B,aAAN,CAAoBlG,OAA/B,EAAwCmG,MAAxC,CAA+C,UAACjG,MAAD,EAASkG,KAAT;AAAA,uBAAmB,EAC/E9D,kBAAkBpC,OAAOS,QAAzB,IAAqCyF,UAAU,CADgC,CAAnB;AAAA,aAA/C,CAAjB;AAGA,gBAAIC,uBAAuBZ,wBAAwB,KAAK7F,KAAL,CAAWI,OAAnC,CAA3B;AACA,gBAAIF,QAAQiG,WAAWO,MAAX,CAAkB,UAACZ,MAAD,EAASrB,IAAT,EAAe+B,KAAf,EAAyB;AACnD,oBAAI/B,KAAKkC,QAAT,EAAmB;AACfb,2BAAOI,IAAP,CAAYO,qBAAqBD,KAArB,EAA4BtG,KAAxC;AACH;AACD,uBAAO4F,MAAP;AACH,aALW,EAKT,EALS,CAAZ;;AAOA,gBAAI,KAAK9F,KAAL,CAAWoB,IAAX,KAAoB,OAApB,IAA+B,KAAKpB,KAAL,CAAWoB,IAAX,KAAoB,aAAvD,EAAsE;AAClE,qBAAKwF,IAAL;AACH;;AAED,iBAAKzG,QAAL,CAAc,EAAED,YAAF,EAAd;;AAEA,gBAAI,KAAKF,KAAL,CAAW4F,QAAf,EAAyB;AACrB,qBAAK5F,KAAL,CAAW4F,QAAX,CAAoB1F,KAApB;AACH;AACJ;;;0CAGiB0E,K,EAAO;AACrB,gBAAI,KAAK5E,KAAL,CAAW6E,OAAf,EAAwB;AACpB,qBAAK7E,KAAL,CAAW6E,OAAX,CAAmBD,KAAnB;AACH;AACJ;;;6CAGoB;AACjB,iBAAKzE,QAAL,CAAc;AACVJ,wBAAQ;AADE,aAAd;;AAIA,gBAAI,KAAKC,KAAL,CAAW6G,cAAf,EAA+B;AAC3B,qBAAK7G,KAAL,CAAW6G,cAAX;AACH;AACJ;;;0CAGiBjC,K,EAAOkC,e,EAAiB;AACtC,gBAAI/G,SAAS,KAAKsD,SAAL,EAAb;;AAEA,oBAAQuB,MAAME,KAAd;AACI,qBAAK,uBAAaiC,UAAlB;AACA,qBAAK,uBAAaC,QAAlB;AACIpC,0BAAMqC,cAAN;AACA,yBAAKC,gCAAL,CAAsCJ,eAAtC;AACA;AACJ,qBAAK,uBAAa/B,KAAlB;AACA,qBAAK,uBAAaC,KAAlB;AACIJ,0BAAMqC,cAAN;AACA,yBAAK9G,QAAL,CAAc;AACVJ,gCAAQ,KAAKC,KAAL,CAAWoB,IAAX,KAAoB,OAApB,GAA8B,IAA9B,GAAqC,CAACrB;AADpC,qBAAd;AAGA,yBAAKoH,WAAL;AACA;AACJ,qBAAK,uBAAaC,MAAlB;AACIxC,0BAAMqC,cAAN;AACA,yBAAK9G,QAAL,CAAc;AACVJ,gCAAQ;AADE,qBAAd;AAGA,yBAAKY,MAAL,CAAYgF,KAAZ;AACA;AApBR;;AAuBA,gBAAI,KAAK3F,KAAL,CAAWiF,SAAf,EAA0B;AACtB,qBAAKjF,KAAL,CAAWiF,SAAX,CAAqBL,KAArB;AACH;AACJ;;;0CAGiBA,K,EAAO;AACrB,iBAAKzE,QAAL,CAAc;AACVL,+BAAe;AADL,aAAd;;AAIA,gBAAI,KAAKE,KAAL,CAAWsF,OAAf,EAAwB;AACpB,qBAAKtF,KAAL,CAAWsF,OAAX,CAAmB,KAAKH,eAAL,CAAqBP,KAArB,CAAnB;AACH;AACJ;;;yCAGgBA,K,EAAO;AACpB,iBAAKzE,QAAL,CAAc;AACVL,+BAAe;AADL,aAAd;;AAIA,gBAAI,KAAKE,KAAL,CAAWwF,MAAf,EAAuB;AACnB,qBAAKxF,KAAL,CAAWwF,MAAX,CAAkB,KAAKL,eAAL,CAAqBP,KAArB,CAAlB;AACH;AACJ;;AAED;;;;;;;;gCAKQ;AAAA;;AACJ,gBAAI,KAAKjC,YAAT,EAAuB;AACnB,qBAAKA,YAAL,CAAkBgD,KAAlB;AACH,aAFD,MAEO;AACH,qBAAKhF,MAAL,CAAYgF,KAAZ;;AAEA,qBAAKxF,QAAL,CAAc;AACVJ,4BAAQ;AADE,iBAAd,EAEG,YAAM;AACL,2BAAKoH,WAAL;AACH,iBAJD;AAKH;AACJ;;AAED;;;;;;;;+BAKO;AACH,gBAAIE,SAASC,aAAb,EAA4B;AACxBD,yBAASC,aAAT,CAAuBV,IAAvB;AACH;AACJ;;AAED;;;;;;;;mCAKW;AACP,gBAAIW,cAAc,KAAK1F,IAAL,CAAU2F,qBAAV,EAAlB;;AAEA,oCAAS;AACLC,yBAAUF,YAAYG,GAAZ,GAAkBC,OAAOC,WAA1B;AADJ,aAAT;AAGH;;;sCAEa;AACV,gBAAIC,kBAAkB,KAAKC,kBAAL,EAAtB;;AAEA,gBAAIC,OAAOF,gBAAgBG,SAA3B;AACA,gBAAIC,OAAOJ,gBAAgBK,UAA3B;;AAEA,iBAAKxE,IAAL,CAAUiC,KAAV;AACAkC,4BAAgBG,SAAhB,GAA4BD,IAA5B;AACAF,4BAAgBK,UAAhB,GAA6BD,IAA7B;AACH;;AAED;;;;;;yDAGiCnB,e,EAAiB;AAC9C,gBAAIqB,UAAUrB,gBAAgBlG,OAAhB,EAAd;AACA,gBAAIwH,YAAY,KAAK3H,KAAL,CAAW4H,YAAX,EAAhB;AACA,gBAAIC,aAAaH,QAAQI,YAAzB;;AAEA,gBAAIJ,QAAQK,SAAR,GAAoBF,UAApB,GAAiCF,UAAUJ,SAAV,GAAsBI,UAAUG,YAArE,EAAmF;AAC/E,wCAAS;AACLH,wCADK;AAELX,6BAASU,QAAQK,SAFZ;AAGLC;AAHK,iBAAT;AAKH,aAND,MAMO,IAAIN,QAAQK,SAAR,GAAoBJ,UAAUJ,SAAlC,EAA6C;AAChD,wCAAS;AACLI,wCADK;AAELX,6BAAUU,QAAQK,SAAR,GAAoBJ,UAAUG,YAA/B,GAA+CD,UAFnD;AAGLG;AAHK,iBAAT;AAKH;AACJ;;;uCAEc;AAAA;;AACX,gBAAIC,iBAAiB,CAAC,KAAKrF,SAAL,EAAtB;;AAEA,iBAAKlD,QAAL,CACI,EAAEJ,QAAQ2I,cAAV,EADJ,EAEI,YAAM;AACF,oBAAIA,cAAJ,EAAoB;AAChB,4BAAKvB,WAAL;AACH;AACJ,aANL;AAQH;;;4CAGmB;AAChB,gBAAIwB,cAAc,KAAKhI,MAAL,CAAYC,OAAZ,GAAsB4G,qBAAtB,GAA8ClG,KAAhE;AACA,gBAAIrB,cAAc,EAAEuD,UAAUmF,WAAZ,EAAlB;;AAEA,gBAAI,KAAK3I,KAAL,CAAW4I,eAAf,EAAgC;AAC5B3I,4BAAYwD,QAAZ,GAAuBkF,WAAvB;AACH;;AAED,iBAAKxI,QAAL,CAAc,EAAEF,wBAAF,EAAd;AACH;;;wCAEeG,O,EAAS;AAAA;;AACrB,gBAAIF,QAAQ,KAAKiB,QAAL,EAAZ;AACA,gBAAI2E,SAAS,EAAb;;AAEA1F,oBAAQ2F,OAAR,CAAgB,UAACzF,MAAD,EAAY;AACxB,oBAAIA,OAAOC,IAAP,KAAgB,OAAhB,IAA2B,CAAC,CAACD,OAAOE,OAAxC,EAAiD;AAC7C,wBAAIwF,cAAc,QAAKzB,eAAL,CAAqBjE,OAAOE,OAA5B,CAAlB;AACAsF,6BAASA,OAAOG,MAAP,CAAcD,WAAd,CAAT;AACH,iBAHD,MAGO,IAAI9F,MAAM2I,OAAN,CAAcvI,OAAOJ,KAArB,MAAgC,CAAC,CAArC,EAAwC;AAC3C4F,2BAAOI,IAAP,CAAY5F,MAAZ;AACH;AACJ,aAPD;;AASA,mBAAOwF,MAAP;AACH;;AAED;;;;;;oCAGY;AACR,mBAAO,KAAK9F,KAAL,CAAWD,MAAX,KAAsB+I,SAAtB,GAAkC,KAAK9I,KAAL,CAAWD,MAA7C,GAAsD,KAAKJ,KAAL,CAAWI,MAAxE;AACH;;;wCAEe6E,K,EAAO;AACnB,gCAAYA,KAAZ,IAAmBS,qBAAaT,MAAMS,MAAnB,IAA2BnF,OAAO,KAAKiB,QAAL,EAAlC,GAAnB;AACH;;AAED;;;;;;mCAGW;AACP,mBAAO,KAAKnB,KAAL,CAAWE,KAAX,IAAoB,KAAKP,KAAL,CAAWO,KAAtC;AACH;;AAED;;;;;;6CAGqB;AACjB,mBAAO,KAAK6I,OAAL,CAAaC,2BAAb,IAA4C3B,SAAS4B,IAA5D;AACH;;AAED;;;;;;;;qCAKa;AACT,mBAAO,KAAK5F,SAAL,MAAoB,KAAK1D,KAAL,CAAWC,aAA/B,IAAgD,KAAKD,KAAL,CAAWG,aAAlE;AACH;;;;EAntBgB,gBAAMoJ,S,WAChBC,S,GAAY;AACf;AACAC,eAAW,oBAAKC,SAAL,CAAe,CAAC,oBAAKC,IAAN,EAAY,oBAAKC,MAAjB,CAAf,CAFI;AAGf;AACAnI,UAAM,oBAAKoI,KAAL,CAAW,CAAC,OAAD,EAAU,OAAV,EAAmB,aAAnB,CAAX,CAJS;AAKf;AACAlI,WAAO,oBAAKkI,KAAL,CAAW,CAAC,SAAD,EAAY,WAAZ,CAAX,CANQ;AAOf;AACAlG,gBAAY,oBAAKmG,OAAL,CAAa,oBAAKD,KAAL,CAAW,CAChC,UADgC,EACpB,YADoB,EACN,WADM,EACO,UADP,EACmB,aADnB,EACkC,aADlC,EACiD,WADjD,EAEhC,cAFgC,EAEhB,cAFgB,EAEA,aAFA,EAEe,eAFf,EAEgC,cAFhC,CAAX,CAAb,CARG;AAYf;AACAzI,cAAU,oBAAK2I,IAbA;AAcf;AACA3J,YAAQ,oBAAK2J,IAfE;AAgBf;AACAd,qBAAiB,oBAAKc,IAjBP;AAkBf;AACAxJ,WAAO,oBAAKuJ,OAAL,CAAa,oBAAKJ,SAAL,CAAe,CAC/B,oBAAKE,MAD0B,EAE/B,oBAAKI,MAF0B,CAAf,CAAb,CAnBQ;AAuBf;AACAvJ,aAAS,oBAAKqJ,OAAL,CAAa,oBAAKG,KAAL,CAAW;AAC7B;AACArJ,cAAM,oBAAKiJ,KAAL,CAAW,CAAC,MAAD,EAAS,OAAT,CAAX,CAFuB;AAG7B;AACAtJ,eAAO,oBAAKmJ,SAAL,CAAe,CAClB,oBAAKE,MADa,EAElB,oBAAKI,MAFa,CAAf,CAJsB;AAQ7B;AACAzF,cAAM,oBAAK2F,IATkB;AAU7B;AACAxF,oBAAY,oBAAKkF,MAXY;AAY7B;AACAtF,qBAAa,oBAAK4F,IAbW;AAc7B;AACAnF,qBAAa,oBAAK6E,MAfW;AAgB7B;AACApF,cAAM,oBAAK0F,IAjBkB;AAkB7B;AACArJ,iBAAS,oBAAKsJ;AAnBe,KAAX,CAAb,CAxBM;AA6Cf;AACAzI,UAAM,oBAAKmI,KAAL,CAAW,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,EAAgB,IAAhB,CAAX,CA9CS;AA+Cf;AACAzH,QAAI,oBAAKwH,MAhDM;AAiDf;AACAzH,UAAM,oBAAKyH,MAlDI;AAmDf;AACAtG,iBAAa,oBAAKsG,MApDH;AAqDd;AACDrH,UAAM,oBAAK2H,IAtDI;AAuDf;AACAjI,WAAO,oBAAKiI,IAxDG;AAyDf;AACAE,WAAO,oBAAKP,KAAL,CAAW,CAAC,eAAD,EAAkB,eAAlB,CAAX,CA1DQ;AA2Df;AACAlE,aAAS,oBAAKgE,IA5DC;AA6Df;AACA9D,YAAQ,oBAAK8D,IA9DE;AA+Df;AACApE,mBAAe,oBAAKoE,IAhEL;AAiEf;AACAlE,kBAAc,oBAAKkE,IAlEJ;AAmEf;AACA/D,iBAAa,oBAAK+D,IApEH;AAqEf;AACA7D,gBAAY,oBAAK6D,IAtEF;AAuEf;AACAzE,aAAS,oBAAKyE,IAxEC;AAyEf;AACAzC,oBAAgB,oBAAKyC,IA1EN;AA2Ef;AACA1D,cAAU,oBAAK0D,IA5EA;AA6Ef;AACArE,eAAW,oBAAKqE,IA9ED;AA+Ef;AACAlH,yBAAqB,oBAAKkH;AAhFX,C,UAmFZU,Y,GAAe;AAClB5I,UAAM,OADY;AAElBL,cAAU,KAFQ;AAGlBM,UAAM,GAHY;AAIlBiC,gBAAY,CAAC,aAAD,EAAgB,cAAhB,EAAgC,UAAhC,EAA4C,WAA5C,CAJM;AAKlBhC,WAAO,SALW;AAMlBsH,qBAAiB,KANC;AAOlBxI,aAAS,EAPS;AAQlB6C,iBAAa;AARK,C,UAWfgH,Y,GAAe;AAClBjB;AADkB,C;kBAunBXtJ,M","file":"select.js","sourcesContent":["/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/. */\n\nimport { autobind } from 'core-decorators';\nimport createFragment from 'react-addons-create-fragment';\nimport React from 'react';\nimport Type from 'prop-types';\n\nimport Button from '../button/button';\nimport Icon from '../icon/icon';\nimport Menu from '../menu/menu';\nimport Mq from '../mq/mq';\nimport Popup from '../popup/popup';\nimport ResizeSensor from '../resize-sensor/resize-sensor';\n\nimport cn from '../cn';\nimport { HtmlElement } from '../lib/prop-types';\nimport keyboardCode from '../lib/keyboard-code';\nimport performance from '../performance';\nimport scrollTo from '../lib/scroll-to';\nimport { SCROLL_TO_CORRECTION, SCROLL_TO_NORMAL_DURATION } from '../vars';\n\n/**\n * @typedef {Object} CheckedOption\n * @property {String} value Уникальное значение, которое будет отправлено на сервер, если вариант выбран\n * @property {String} text Текст варианта\n * @property {String} checkedText Текст, который будет отображаться при выборе\n * @property {Icon} icon Иконка варианта\n */\n\n/**\n * Компонент выпадающего списка.\n */\n@cn('select', Popup)\n@performance(true)\nclass Select extends React.Component {\n    static propTypes = {\n        /** Дополнительный класс */\n        className: Type.oneOfType([Type.func, Type.string]),\n        /** Тип выпадающего списка */\n        mode: Type.oneOf(['check', 'radio', 'radio-check']),\n        /** Управление возможностью компонента занимать всю ширину родителя */\n        width: Type.oneOf(['default', 'available']),\n        /** Направления, в которые может открываться попап компонента */\n        directions: Type.arrayOf(Type.oneOf([\n            'top-left', 'top-center', 'top-right', 'left-top', 'left-center', 'left-bottom', 'right-top',\n            'right-center', 'right-bottom', 'bottom-left', 'bottom-center', 'bottom-right'\n        ])),\n        /** Управление возможностью редактирования значения */\n        disabled: Type.bool,\n        /** Управление видимостью выпадающего списка */\n        opened: Type.bool,\n        /** Ширинa выпадающего списка равна ширине кнопки */\n        equalPopupWidth: Type.bool,\n        /** Список выбранных значений */\n        value: Type.arrayOf(Type.oneOfType([\n            Type.string,\n            Type.number\n        ])),\n        /** Список вариантов выбора */\n        options: Type.arrayOf(Type.shape({\n            /** Тип списка вариантов */\n            type: Type.oneOf(['item', 'group']),\n            /** Уникальное значение, которое будет отправлено на сервер, если вариант выбран */\n            value: Type.oneOfType([\n                Type.string,\n                Type.number\n            ]),\n            /** Текст варианта */\n            text: Type.node,\n            /** Текст варианта для нативного режима */\n            nativeText: Type.string,\n            /** Отображение варианта */\n            description: Type.node,\n            /** Текст, который будет отображаться при выборе */\n            checkedText: Type.string,\n            /** Иконка варианта */\n            icon: Type.node,\n            /** Список вариантов, только для type='group' */\n            content: Type.array\n        })),\n        /** Размер компонента */\n        size: Type.oneOf(['s', 'm', 'l', 'xl']),\n        /** Уникальный идентификатор блока */\n        id: Type.string,\n        /** Уникальное имя блока */\n        name: Type.string,\n        /** Подсказка, которая отображается в случае если ни один из пунктов выбран */\n        placeholder: Type.string,\n         /** Подсказка под полем */\n        hint: Type.node,\n        /** Отображение ошибки */\n        error: Type.node,\n        /** Тема компонента */\n        theme: Type.oneOf(['alfa-on-color', 'alfa-on-white']),\n        /** Обработчик фокуса на компоненте */\n        onFocus: Type.func,\n        /** Обработчик потери фокуса компонентом */\n        onBlur: Type.func,\n        /** Обработчик фокуса на кнопке */\n        onButtonFocus: Type.func,\n        /** Обработчик потери у кнопки */\n        onButtonBlur: Type.func,\n        /** Обработчик фокуса на меню */\n        onMenuFocus: Type.func,\n        /** Обработчик потери фокуса у меню */\n        onMenuBlur: Type.func,\n        /** Обработчик клика по кнопке компонента */\n        onClick: Type.func,\n        /** Обработчик клика вне компонента */\n        onClickOutside: Type.func,\n        /** Обработчик изменения значения */\n        onChange: Type.func,\n        /** Обработчик нажатия на клавишу */\n        onKeyDown: Type.func,\n        /** Кастомный метод рендера содержимого кнопки, принимает на вход: массив элементов типа [CheckedOption](#CheckedOption) */\n        renderButtonContent: Type.func\n    };\n\n    static defaultProps = {\n        mode: 'check',\n        disabled: false,\n        size: 'm',\n        directions: ['bottom-left', 'bottom-right', 'top-left', 'top-right'],\n        width: 'default',\n        equalPopupWidth: false,\n        options: [],\n        placeholder: 'Выберите:'\n    };\n\n    static contextTypes = {\n        positioningContainerElement: HtmlElement\n    };\n\n    state = {\n        buttonFocused: false,\n        hasGroup: false,\n        nativeFocused: false,\n        opened: !!this.props.opened,\n        popupStyles: {},\n        value: this.props.value || []\n    };\n\n    /**\n     * @type {HTMLDivElement}\n     */\n    root;\n\n    /**\n     * @type {Button}\n     */\n    button;\n\n    /**\n     * @type {Popup}\n     */\n    popup;\n\n    /**\n     * @type {Menu}\n     */\n    menu;\n\n    componentWillMount() {\n        this.setState({\n            hasGroup: this.props.options.some(option => !!(option.type === 'group' && !!option.content))\n        });\n    }\n\n    componentDidMount() {\n        this.popup.setTarget(this.button.getNode());\n        this.updatePopupStyles();\n    }\n\n    componentWillReceiveProps(nextProps) {\n        if (this.state.opened && nextProps.disabled) {\n            this.toggleOpened();\n        }\n\n        this.setState({\n            hasGroup: this.props.options.some(option => !!(option.type === 'group' && !!option.content))\n        });\n    }\n\n    render(cn, Popup) {\n        let value = this.getValue();\n\n        return (\n            <div\n                className={ cn({\n                    mode: this.props.mode,\n                    size: this.props.size,\n                    width: this.props.width,\n                    disabled: this.props.disabled,\n                    checked: this.props.mode !== 'radio' && value.length > 0,\n                    focused: this.getFocused(),\n                    invalid: !!this.props.error\n                }) }\n                ref={ (root) => { this.root = root; } }\n            >\n                <span className={ cn('inner') }>\n                    <input\n                        type='hidden'\n                        name={ this.props.name }\n                        id={ this.props.id }\n                        value={ value }\n                    />\n                    { this.renderButton(cn) }\n                    { this.renderNativeSelect(cn) }\n                    {\n                        (this.props.error || this.props.hint) &&\n                        <span className={ cn('sub') }>\n                            { this.props.error || this.props.hint }\n                        </span>\n                    }\n                    { this.renderPopup(cn, Popup) }\n                </span>\n            </div>\n        );\n    }\n\n    renderButton(cn) {\n        return (\n            <Button\n                className={ cn('button') }\n                size={ this.props.size }\n                ref={ (button) => { this.button = button; } }\n                disabled={ this.props.disabled }\n                text={ this.renderButtonContent() }\n                rightAddons={ [\n                    <Icon\n                        key='addon-icon'\n                        className={ cn('tick') }\n                    />,\n                    <ResizeSensor key='addon-sensor' onResize={ this.updatePopupStyles } />\n                ] }\n                onClick={ this.handleButtonClick }\n                onFocus={ this.handleButtonFocus }\n                onBlur={ this.handleButtonBlur }\n            />\n        );\n    }\n\n    renderNativeSelect(cn) {\n        let isCheckMode = this.props.mode === 'check';\n        let hasEmptyOptGroup = isCheckMode || this.state.hasGroup;\n        let hasEmptyOption = !isCheckMode && !this.state.hasGroup;\n        let value = this.getValue();\n\n        if (!isCheckMode) {\n            value = value.length ? value[0] : '';\n        }\n\n        return (\n            <Mq\n                query='--small-only'\n                touch={ true }\n            >\n                <select\n                    ref={ (nativeSelect) => { this.nativeSelect = nativeSelect; } }\n                    className={ cn({ native: true }) }\n                    disabled={ this.props.disabled }\n                    multiple={ isCheckMode && 'multiple' }\n                    value={ value }\n                    onChange={ this.handleNativeOptionCheck }\n                    onClick={ this.handleNativeClick }\n                    onFocus={ this.handleNativeFocus }\n                    onBlur={ this.handleNativeBlur }\n                >\n                    {\n                        /*\n                            Хак с пустым <optgroup> — для фикса странного поведения select с атрибутом multiple на iOS7+:\n                            1. If no option is selected, it selects the first option in the list.\n                            2. If one option is selected, it deselects that option.\n                            3. If multiple options are selected, it deselects the last option to be tapped.\n                            4. If an option previously selected is deselected, it reselects the option.\n                            https://discussions.apple.com/message/23745665\n                            https://discussions.apple.com/message/24694954\n                        */\n                        hasEmptyOptGroup &&\n                        <optgroup\n                            disabled={ true }\n                            label={ this.props.placeholder }\n                        />\n                    }\n                    {\n                        hasEmptyOption &&\n                        <option disabled={ true } value=''>\n                            { this.props.placeholder }\n                        </option>\n                    }\n                    { this.renderNativeOptionsList(this.props.options) }\n                </select>\n            </Mq>\n        );\n    }\n\n    renderPopup(cn, Popup) {\n        let optionsList = this.renderOptionsList(this.props.options);\n        let opened = this.getOpened();\n        let value = this.getValue();\n\n        return (\n            <Popup\n                key='popup'\n                ref={ (popup) => { this.popup = popup; } }\n                for={ this.props.name }\n                autoclosable={ true }\n                className={ cn('popup') }\n                directions={ this.props.directions }\n                height='adaptive'\n                padded={ false }\n                size={ this.props.size }\n                target='anchor'\n                visible={ opened }\n                onClickOutside={ this.handleClickOutside }\n                minWidth={ this.state.popupStyles.minWidth }\n                maxWidth={ this.state.popupStyles.maxWidth }\n            >\n                <Menu\n                    ref={ (menu) => { this.menu = menu; } }\n                    className={ cn('menu') }\n                    size={ this.props.size }\n                    disabled={ this.props.disabled }\n                    mode={ this.props.mode }\n                    content={ optionsList }\n                    onItemCheck={ this.handleOptionCheck }\n                    checkedItems={ value }\n                    onFocus={ this.handleMenuFocus }\n                    onBlur={ this.handleMenuBlur }\n                    onKeyDown={ this.handleMenuKeyDown }\n                />\n            </Popup>\n        );\n    }\n\n    renderOptionsList(options) {\n        return (\n            options.map((option) => {\n                if (option.type === 'group' && !!option.content) {\n                    let content = this.renderOptionsList(option.content);\n\n                    return ({\n                        type: 'group',\n                        title: option.title,\n                        content\n                    });\n                }\n\n                let content = option.description || option.text;\n\n                return ({\n                    value: option.value,\n                    content: createFragment({ icon: option.icon, content })\n                });\n            })\n        );\n    }\n\n    renderNativeOptionsList(options) {\n        let groupKey = 0;\n\n        return (\n            options.map((option) => {\n                if (option.type === 'group' && !!option.content) {\n                    let content = this.renderNativeOptionsList(option.content);\n\n                    groupKey += 1;\n\n                    return (\n                        <optgroup\n                            key={ `group_${groupKey}` }\n                            label={ option.title }\n                        >\n                            { content }\n                        </optgroup>\n                    );\n                }\n\n                return (\n                    <option\n                        key={ option.value }\n                        value={ option.value }\n                    >\n                        { option.nativeText || option.text }\n                    </option>\n                );\n            })\n        );\n    }\n\n    renderButtonContent() {\n        let checkedItems = this.getCheckedItems(this.props.options);\n\n        if (this.props.renderButtonContent) {\n            return this.props.renderButtonContent(checkedItems);\n        }\n\n        let checkedItemsText = checkedItems.map(item => item.checkedText || item.text).join(', ');\n        return checkedItemsText || this.props.placeholder;\n    }\n\n    @autobind\n    handleButtonClick(event) {\n        if (!this.props.disabled) {\n            this.toggleOpened();\n        }\n\n        if (this.props.onClick) {\n            this.props.onClick(event);\n        }\n    }\n\n    @autobind\n    handleButtonKeyDown(event) {\n        if (!this.props.disabled) {\n            if (event.which === keyboardCode.ENTER || event.which === keyboardCode.SPACE) {\n                this.toggleOpened();\n            }\n        }\n\n        if (this.props.onKeyDown) {\n            this.props.onKeyDown(event);\n        }\n    }\n\n    @autobind\n    handleButtonFocus(event) {\n        this.setState({ buttonFocused: true });\n\n        if (this.props.onButtonFocus) {\n            this.props.onButtonFocus(this.getRevisedEvent(event));\n        }\n    }\n\n    @autobind\n    handleButtonBlur(event) {\n        this.setState({ buttonFocused: false });\n\n        if (this.props.onButtonBlur) {\n            this.props.onButtonBlur(this.getRevisedEvent(event));\n        }\n    }\n\n    @autobind\n    handleMenuFocus(event) {\n        event.target.value = this.getValue();\n\n        if (this.props.onFocus) {\n            this.props.onFocus(event);\n        }\n\n        if (this.props.onMenuFocus) {\n            this.props.onMenuFocus(event);\n        }\n    }\n\n    @autobind\n    handleMenuBlur(event) {\n        this.setState({\n            opened: false\n        });\n\n        event.target.value = this.getValue();\n\n        if (this.props.onBlur) {\n            this.props.onBlur(event);\n        }\n\n        if (this.props.onMenuBlur) {\n            this.props.onMenuBlur(event);\n        }\n    }\n\n    @autobind\n    handleOptionCheck(value) {\n        let opened = this.getOpened();\n\n        this.setState(\n            { value, opened: this.props.mode === 'check' },\n            () => {\n                // Если у Select-а закрылось выпадающее меню,\n                // то возвращаем фокус на кнопку Select\n                // после выбора опции.\n                let newOpened = this.getOpened();\n                if (!newOpened && opened !== newOpened) {\n                    this.button.focus();\n                }\n            }\n        );\n\n        if (this.props.onChange) {\n            this.props.onChange(value);\n        }\n    }\n\n    @autobind\n    handleNativeOptionCheck(event) {\n        function getFlattenedPropOptions(options) {\n            let result = [];\n\n            options.forEach((option) => {\n                if (option.type === 'group' && !!option.content) {\n                    let findInGroup = getFlattenedPropOptions(option.content);\n                    result = result.concat(findInGroup);\n                } else {\n                    result.push(option);\n                }\n            });\n\n            return result;\n        }\n\n        let hasEmptyOption = this.props.mode !== 'check' && !this.state.hasGroup;\n        let domOptions = Array.from(event.currentTarget.options).filter((option, index) => !(\n            hasEmptyOption && option.disabled && index === 0\n        ));\n        let flattenedPropOptions = getFlattenedPropOptions(this.props.options);\n        let value = domOptions.reduce((result, item, index) => {\n            if (item.selected) {\n                result.push(flattenedPropOptions[index].value);\n            }\n            return result;\n        }, []);\n\n        if (this.props.mode === 'radio' || this.props.mode === 'radio-check') {\n            this.blur();\n        }\n\n        this.setState({ value });\n\n        if (this.props.onChange) {\n            this.props.onChange(value);\n        }\n    }\n\n    @autobind\n    handleNativeClick(event) {\n        if (this.props.onClick) {\n            this.props.onClick(event);\n        }\n    }\n\n    @autobind\n    handleClickOutside() {\n        this.setState({\n            opened: false\n        });\n\n        if (this.props.onClickOutside) {\n            this.props.onClickOutside();\n        }\n    }\n\n    @autobind\n    handleMenuKeyDown(event, highlightedItem) {\n        let opened = this.getOpened();\n\n        switch (event.which) {\n            case keyboardCode.DOWN_ARROW:\n            case keyboardCode.UP_ARROW:\n                event.preventDefault();\n                this.syncKeyboardNavigationWithScroll(highlightedItem);\n                break;\n            case keyboardCode.ENTER:\n            case keyboardCode.SPACE:\n                event.preventDefault();\n                this.setState({\n                    opened: this.props.mode === 'check' ? true : !opened\n                });\n                this.focusOnMenu();\n                break;\n            case keyboardCode.ESCAPE:\n                event.preventDefault();\n                this.setState({\n                    opened: false\n                });\n                this.button.focus();\n                break;\n        }\n\n        if (this.props.onKeyDown) {\n            this.props.onKeyDown(event);\n        }\n    }\n\n    @autobind\n    handleNativeFocus(event) {\n        this.setState({\n            nativeFocused: true\n        });\n\n        if (this.props.onFocus) {\n            this.props.onFocus(this.getRevisedEvent(event));\n        }\n    }\n\n    @autobind\n    handleNativeBlur(event) {\n        this.setState({\n            nativeFocused: false\n        });\n\n        if (this.props.onBlur) {\n            this.props.onBlur(this.getRevisedEvent(event));\n        }\n    }\n\n    /**\n     * Устанавливает фокус на компонент.\n     *\n     * @public\n     */\n    focus() {\n        if (this.nativeSelect) {\n            this.nativeSelect.focus();\n        } else {\n            this.button.focus();\n\n            this.setState({\n                opened: true\n            }, () => {\n                this.focusOnMenu();\n            });\n        }\n    }\n\n    /**\n     * Убирает фокус с компонента.\n     *\n     * @public\n     */\n    blur() {\n        if (document.activeElement) {\n            document.activeElement.blur();\n        }\n    }\n\n    /**\n     * Скроллит страницу до компонента.\n     *\n     * @public\n     */\n    scrollTo() {\n        let elementRect = this.root.getBoundingClientRect();\n\n        scrollTo({\n            targetY: (elementRect.top + window.pageYOffset) - SCROLL_TO_CORRECTION\n        });\n    }\n\n    focusOnMenu() {\n        let scrollContainer = this.getScrollContainer();\n\n        let posX = scrollContainer.scrollTop;\n        let posY = scrollContainer.scrollLeft;\n\n        this.menu.focus();\n        scrollContainer.scrollTop = posX;\n        scrollContainer.scrollLeft = posY;\n    }\n\n    /**\n     * @param {MenuItem} highlightedItem Выбранный в текущий момент пункт меню\n     */\n    syncKeyboardNavigationWithScroll(highlightedItem) {\n        let element = highlightedItem.getNode();\n        let container = this.popup.getInnerNode();\n        let correction = element.offsetHeight;\n\n        if (element.offsetTop + correction > container.scrollTop + container.offsetHeight) {\n            scrollTo({\n                container,\n                targetY: element.offsetTop,\n                duration: SCROLL_TO_NORMAL_DURATION\n            });\n        } else if (element.offsetTop < container.scrollTop) {\n            scrollTo({\n                container,\n                targetY: (element.offsetTop - container.offsetHeight) + correction,\n                duration: SCROLL_TO_NORMAL_DURATION\n            });\n        }\n    }\n\n    toggleOpened() {\n        let newOpenedState = !this.getOpened();\n\n        this.setState(\n            { opened: newOpenedState },\n            () => {\n                if (newOpenedState) {\n                    this.focusOnMenu();\n                }\n            }\n        );\n    }\n\n    @autobind\n    updatePopupStyles() {\n        let buttonWidth = this.button.getNode().getBoundingClientRect().width;\n        let popupStyles = { minWidth: buttonWidth };\n\n        if (this.props.equalPopupWidth) {\n            popupStyles.maxWidth = buttonWidth;\n        }\n\n        this.setState({ popupStyles });\n    }\n\n    getCheckedItems(options) {\n        let value = this.getValue();\n        let result = [];\n\n        options.forEach((option) => {\n            if (option.type === 'group' && !!option.content) {\n                let findInGroup = this.getCheckedItems(option.content);\n                result = result.concat(findInGroup);\n            } else if (value.indexOf(option.value) !== -1) {\n                result.push(option);\n            }\n        });\n\n        return result;\n    }\n\n    /**\n     * @returns {Boolean}\n     */\n    getOpened() {\n        return this.props.opened !== undefined ? this.props.opened : this.state.opened;\n    }\n\n    getRevisedEvent(event) {\n        return { ...event, target: { ...event.target, value: this.getValue() } };\n    }\n\n    /**\n     * @returns {String|Number}\n     */\n    getValue() {\n        return this.props.value || this.state.value;\n    }\n\n    /**\n     * @returns {HTMLElement}\n     */\n    getScrollContainer() {\n        return this.context.positioningContainerElement || document.body;\n    }\n\n    /**\n     * Возвращает `true`, если компонент находится в состоянии фокуса.\n     *\n     * @returns {Boolean}\n     */\n    getFocused() {\n        return this.getOpened() || this.state.buttonFocused || this.state.nativeFocused;\n    }\n}\n\nexport default Select;\n"]}