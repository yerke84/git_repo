declare module 'arui-feather/select' {
    import { Component, ReactNode } from 'react';

    export interface SelectProps {

        /**
         * Дополнительный класс
         */
        className?: Function | string;
        /**
         * Тип выпадающего списка
         */
        mode?: 'check' | 'radio' | 'radio-check';
        /**
         * Управление возможностью компонента занимать всю ширину родителя
         */
        width?: 'default' | 'available';
        /**
         * Направления, в которые может открываться попап компонента
         */
        directions?: Array<'top-left' | 'top-center' | 'top-right' | 'left-top' | 'left-center' | 'left-bottom' | 'right-top' | 'right-center' | 'right-bottom' | 'bottom-left' | 'bottom-center' | 'bottom-right'>;
        /**
         * Управление возможностью редактирования значения
         */
        disabled?: boolean;
        /**
         * Управление видимостью выпадающего списка
         */
        opened?: boolean;
        /**
         * Ширинa выпадающего списка равна ширине кнопки
         */
        equalPopupWidth?: boolean;
        /**
         * Список выбранных значений
         */
        value?: Array<string | number>;
        /**
         * Список вариантов выбора
         */
        options?: Array<{

            /**
             * Тип списка вариантов
             */
            type?: 'item' | 'group';

            /**
             * Уникальное значение, которое будет отправлено на сервер, если вариант выбран
             */
            value?: string | number;

            /**
             * Текст варианта
             */
            text?: ReactNode;

            /**
             * Текст варианта для нативного режима
             */
            nativeText?: string;

            /**
             * Отображение варианта
             */
            description?: ReactNode;

            /**
             * Текст, который будет отображаться при выборе
             */
            checkedText?: string;

            /**
             * Иконка варианта
             */
            icon?: ReactNode;

            /**
             * Список вариантов, только для type='group'
             */
            content?: Array<any>
        }>;
        /**
         * Размер компонента
         */
        size?: 's' | 'm' | 'l' | 'xl';
        /**
         * Уникальный идентификатор блока
         */
        id?: string;
        /**
         * Уникальное имя блока
         */
        name?: string;
        /**
         * Подсказка, которая отображается в случае если ни один из пунктов выбран
         */
        placeholder?: string;
        /**
         * Подсказка под полем
         */
        hint?: ReactNode;
        /**
         * Отображение ошибки
         */
        error?: ReactNode;
        /**
         * Тема компонента
         */
        theme?: 'alfa-on-color' | 'alfa-on-white';
        /**
         * Обработчик фокуса на компоненте
         */
        onFocus?: Function;
        /**
         * Обработчик потери фокуса компонентом
         */
        onBlur?: Function;
        /**
         * Обработчик фокуса на кнопке
         */
        onButtonFocus?: Function;
        /**
         * Обработчик потери у кнопки
         */
        onButtonBlur?: Function;
        /**
         * Обработчик фокуса на меню
         */
        onMenuFocus?: Function;
        /**
         * Обработчик потери фокуса у меню
         */
        onMenuBlur?: Function;
        /**
         * Обработчик клика по кнопке компонента
         */
        onClick?: Function;
        /**
         * Обработчик клика вне компонента
         */
        onClickOutside?: Function;
        /**
         * Обработчик изменения значения
         */
        onChange?: Function;
        /**
         * Обработчик нажатия на клавишу
         */
        onKeyDown?: Function;
        /**
         * Кастомный метод рендера содержимого кнопки, принимает на вход: массив элементов типа [CheckedOption](#CheckedOption)
         */
        renderButtonContent?: Function;
    }


    /**
     * Компонент выпадающего списка.
     */
    export default class Select extends Component<SelectProps, any> {

        /**
         * Устанавливает фокус на компонент.
         */
        focus(): any;
        /**
         * Убирает фокус с компонента.
         */
        blur(): any;
        /**
         * Скроллит страницу до компонента.
         */
        scrollTo(): any;
    }
}