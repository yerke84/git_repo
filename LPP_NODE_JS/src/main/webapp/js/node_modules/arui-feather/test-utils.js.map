{"version":3,"sources":["test-utils.js"],"names":["render","cleanUp","simulate","sharedContainer","jsx","options","container","document","createElement","body","appendChild","css","setAttribute","instance","node","findDOMNode","childNodes","length","removeChild","firstChild","event","data","Simulate"],"mappings":";;;;;QA+BgBA,M,GAAAA,M;QA2BAC,O,GAAAA,O;QAiBAC,Q,GAAAA,Q;;AAnEhB;;;;AACA;;;;;;AATA;;;;AAIA;AACA;AACA;;AAKA,IAAIC,kBAAkB,IAAtB;;AAEA;;;;;;;;;AASA;;;;;;;;;AASO,SAASH,MAAT,CAAgBI,GAAhB,EAAmC;AAAA,QAAdC,OAAc,uEAAJ,EAAI;;AACtC,QAAIC,YAAYD,QAAQC,SAAxB;;AAEA,QAAI,CAACA,SAAL,EAAgB;AACZ,YAAI,CAACH,eAAL,EAAsB;AAClBA,8BAAkBI,SAASC,aAAT,CAAuB,KAAvB,CAAlB;AACAD,qBAASE,IAAT,CAAcC,WAAd,CAA0BP,eAA1B;AACH;AACDG,oBAAYH,eAAZ;AACH;;AAED,QAAIE,QAAQM,GAAZ,EAAiB;AACbL,kBAAUM,YAAV,CAAuB,OAAvB,EAAgCP,QAAQM,GAAxC;AACH;;AAED,QAAIE,WAAW,mBAASb,MAAT,CAAgBI,GAAhB,EAAqBE,SAArB,CAAf;;AAEA,WAAO;AACHO,0BADG;AAEHC,cAAM,mBAASC,WAAT,CAAqBF,QAArB,CAFH;AAGHP;AAHG,KAAP;AAKH;;AAED;;;AAGO,SAASL,OAAT,GAAmB;AACtB,QAAIE,eAAJ,EAAqB;AACjBA,0BAAkB,IAAlB;AACH;;AAED,WAAOI,SAASE,IAAT,CAAcO,UAAd,CAAyBC,MAAzB,GAAkC,CAAzC,EAA4C;AACxCV,iBAASE,IAAT,CAAcS,WAAd,CAA0BX,SAASE,IAAT,CAAcU,UAAxC;AACH;AACJ;;AAED;;;;;;;AAOO,SAASjB,QAAT,CAAkBY,IAAlB,EAAwBM,KAAxB,EAA+BC,IAA/B,EAAqC;AACxC,wBAAUC,QAAV,CAAmBF,KAAnB,EAA0BN,IAA1B,EAAgCO,IAAhC;AACH","file":"test-utils.js","sourcesContent":["/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/. */\n\n/* eslint import/no-extraneous-dependencies: [2, {\"devDependencies\": true}] */\n/* eslint react/no-render-return-value: 0 */\n/* eslint react/no-find-dom-node: 0 */\n\nimport ReactDOM from 'react-dom';\nimport TestUtils from 'react-dom/test-utils';\n\nlet sharedContainer = null;\n\n/**\n * Тестовая обертка.\n *\n * @typedef {Object} TestWrapper\n * @property {React.Component} instance Ссылка на экземпляр React компонента.\n * @property {Node} node Корневой HTML узел компонента.\n * @property {Node} container HTML узел контейнера, в котором отрендерен компонент.\n */\n\n/**\n * Рендерит компонент в настоящий DOM, возвращает тестовую обертку.\n *\n * @param {Object} jsx JSX для рендера.\n * @param {Object} [options] Опции для рендера.\n * @param {String} [options.css] Стили для рендер контейнера.\n * @param {Node} [options.container] Контейнер, в который нарендерить компонент.\n * @returns {TestWrapper}\n */\nexport function render(jsx, options = {}) {\n    let container = options.container;\n\n    if (!container) {\n        if (!sharedContainer) {\n            sharedContainer = document.createElement('div');\n            document.body.appendChild(sharedContainer);\n        }\n        container = sharedContainer;\n    }\n\n    if (options.css) {\n        container.setAttribute('style', options.css);\n    }\n\n    let instance = ReactDOM.render(jsx, container);\n\n    return {\n        instance,\n        node: ReactDOM.findDOMNode(instance),\n        container\n    };\n}\n\n/**\n * Очищает содержимое DOM после тестов.\n */\nexport function cleanUp() {\n    if (sharedContainer) {\n        sharedContainer = null;\n    }\n\n    while (document.body.childNodes.length > 0) {\n        document.body.removeChild(document.body.firstChild);\n    }\n}\n\n/**\n * Симулирует событие на HTML узле.\n *\n * @param {Node} node HTML узел, на котором необходимо сгенерить событие.\n * @param {String} event Тип события.\n * @param {*} [data] Данные для прокисрования в событие.\n */\nexport function simulate(node, event, data) {\n    TestUtils.Simulate[event](node, data);\n}\n"]}