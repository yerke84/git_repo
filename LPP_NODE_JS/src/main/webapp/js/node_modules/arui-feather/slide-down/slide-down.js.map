{"version":3,"sources":["slide-down/slide-down.jsx"],"names":["SlideDown","state","height","isHeightAuto","props","isExpanded","setAutoHeight","nextProps","setHeightToContentHeight","setHeightToNull","cn","getHeight","handleTransitionEnd","slideDown","expanded","slideDownContent","children","event","propertyName","setState","offsetHeight","forceUpdate","getBoundingClientRect","Component","propTypes","bool","node","theme","oneOf","className","oneOfType","string","func"],"mappings":";;;;;;;;kEAAA;;;;AAIA;;;;AACA;;;;AAEA;;AAEA;;;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA;;;;IAMMA,S,WAFL,kBAAG,YAAH,C,UACA,4B;;;;;;;;;;;;;;gMAaGC,K,GAAQ;AACJC,oBAAQ,CADJ;AAEJC,0BAAc;AAFV,S;;;;;4CAQY;AAChB,gBAAI,KAAKC,KAAL,CAAWC,UAAf,EAA2B;AACvB,qBAAKC,aAAL;AACH;AACJ;;;kDAEyBC,S,EAAW;AACjC,gBAAI,KAAKH,KAAL,CAAWC,UAAX,KAA0BE,UAAUF,UAAxC,EAAoD;AAChD,oBAAIE,UAAUF,UAAd,EAA0B;AACtB,yBAAKG,wBAAL;AACH,iBAFD,MAEO;AACH,yBAAKC,eAAL;AACH;AACJ;AACJ;;;+BAEMC,E,EAAI;AAAA;;AACP,mBACI;AAAA;AAAA;AACI,+BAAYA,EADhB;AAEI,2BACI,EAAER,QAAQ,KAAKS,SAAL,EAAV,EAHR;AAKI,qCAAkB,KAAKC,mBAL3B;AAMI,yBAAM;AAAA,+BAAc,OAAKC,SAAL,GAAiBA,SAA/B;AAAA;AANV;AAQI;AAAA;AAAA;AACI,mCAAYH,GAAG,SAAH,EAAc,EAAEI,UAAU,KAAKb,KAAL,CAAWE,YAAvB,EAAd,CADhB;AAEI,6BAAM;AAAA,mCAAqB,OAAKY,gBAAL,GAAwBA,gBAA7C;AAAA;AAFV;AAIM,yBAAKX,KAAL,CAAWY;AAJjB;AARJ,aADJ;AAiBH;;;4CAGmBC,K,EAAO;AACvB,gBAAIA,MAAMC,YAAN,KAAuB,QAAvB,IAAmC,KAAKd,KAAL,CAAWC,UAAlD,EAA8D;AAC1D,qBAAKC,aAAL;AACH;AACJ;;;oCAEW;AACR,mBAAO,KAAKL,KAAL,CAAWE,YAAX,GACD,MADC,GAED,KAAKF,KAAL,CAAWC,MAFjB;AAGH;;;mDAE0B;AACvB,iBAAKiB,QAAL,CAAc;AACVhB,8BAAc,KADJ;AAEVD,wBAAQ,KAAKa,gBAAL,CAAsBK;AAFpB,aAAd;AAIH;;;0CAEiB;AAAA;;AACd,iBAAKZ,wBAAL;;AAEC;AACD,iBAAKa,WAAL,CAAiB,YAAM;AACnB;AACA,uBAAKR,SAAL,CAAeS,qBAAf;AACA,uBAAKH,QAAL,CAAc;AACVjB,4BAAQ;AADE,iBAAd;AAGH,aAND;AAOH;;;wCAEe;AACZ,iBAAKiB,QAAL,CAAc;AACVhB,8BAAc;AADJ,aAAd;AAGH;;;;EA7FmB,gBAAMoB,S,WACnBC,S,GAAY;AACf;AACAnB,gBAAY,oBAAKoB,IAFF;AAGf;AACAT,cAAU,oBAAKU,IAJA;AAKf;AACAC,WAAO,oBAAKC,KAAL,CAAW,CAAC,eAAD,EAAkB,eAAlB,CAAX,CANQ;AAOf;AACAC,eAAW,oBAAKC,SAAL,CAAe,CAAC,oBAAKC,MAAN,EAAc,oBAAKC,IAAnB,CAAf;AARI,C;kBA+FRhC,S","file":"slide-down.js","sourcesContent":["/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/. */\n\nimport React from 'react';\nimport Type from 'prop-types';\n\nimport { autobind } from 'core-decorators';\n\nimport cn from '../cn';\nimport performance from '../performance';\n\n/**\n * Компонент \"расхлопа\".\n * Позволяет скрывать и отображать контент.\n */\n@cn('slide-down')\n@performance()\nclass SlideDown extends React.Component {\n    static propTypes = {\n        /** Управление состоянием expand/collapse компонента */\n        isExpanded: Type.bool,\n        /** Контент компонента */\n        children: Type.node,\n        /** Тема компонента */\n        theme: Type.oneOf(['alfa-on-color', 'alfa-on-white']),\n        /** Дополнительный класс */\n        className: Type.oneOfType([Type.string, Type.func])\n    };\n\n    state = {\n        height: 0,\n        isHeightAuto: false\n    };\n\n    slideDown;\n    slideDownContent;\n\n    componentDidMount() {\n        if (this.props.isExpanded) {\n            this.setAutoHeight();\n        }\n    }\n\n    componentWillReceiveProps(nextProps) {\n        if (this.props.isExpanded !== nextProps.isExpanded) {\n            if (nextProps.isExpanded) {\n                this.setHeightToContentHeight();\n            } else {\n                this.setHeightToNull();\n            }\n        }\n    }\n\n    render(cn) {\n        return (\n            <div\n                className={ cn }\n                style={\n                    { height: this.getHeight() }\n                }\n                onTransitionEnd={ this.handleTransitionEnd }\n                ref={ slideDown => (this.slideDown = slideDown) }\n            >\n                <div\n                    className={ cn('content', { expanded: this.state.isHeightAuto }) }\n                    ref={ slideDownContent => (this.slideDownContent = slideDownContent) }\n                >\n                    { this.props.children }\n                </div>\n            </div>\n        );\n    }\n\n    @autobind\n    handleTransitionEnd(event) {\n        if (event.propertyName === 'height' && this.props.isExpanded) {\n            this.setAutoHeight();\n        }\n    }\n\n    getHeight() {\n        return this.state.isHeightAuto\n            ? 'auto'\n            : this.state.height;\n    }\n\n    setHeightToContentHeight() {\n        this.setState({\n            isHeightAuto: false,\n            height: this.slideDownContent.offsetHeight\n        });\n    }\n\n    setHeightToNull() {\n        this.setHeightToContentHeight();\n\n         // Заставляем React перерисовать элемент\n        this.forceUpdate(() => {\n            // Заставляем браузер сделать reflow\n            this.slideDown.getBoundingClientRect();\n            this.setState({\n                height: 0\n            });\n        });\n    }\n\n    setAutoHeight() {\n        this.setState({\n            isHeightAuto: true\n        });\n    }\n}\n\nexport default SlideDown;\n"]}