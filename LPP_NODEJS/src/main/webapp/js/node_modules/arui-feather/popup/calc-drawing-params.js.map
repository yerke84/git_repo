{"version":3,"sources":["popup/calc-drawing-params.js"],"names":["calcTargetDimensions","calcFitContainerDimensions","calcBestDrawingParams","VIEWPORT_ACCURACY_FACTOR","VIEWPORT_PADDING","DEFAULT_DIRECTIONS","getMainDirection","direction","deliveryPosition","indexOf","substr","getSecondaryDirection","popup","isTargetAnchor","targetPosition","left","top","width","height","anchor","targetAnchor","anchorRect","getBoundingClientRect","fitContainer","fitContainerRect","scrollLeft","scrollTop","window","pageXOffset","pageYOffset","calcViewportDimensions","winTop","winLeft","winWidth","innerWidth","winHeight","innerHeight","bottom","right","calcContainerDimensions","container","containerTop","containerLeft","containerHeight","offsetHeight","containerWidth","offsetWidth","calcFitContainerFactor","position","fitContainerDimensions","popupDimensions","fitContainerOffset","offset","intersectionLeft","Math","max","intersectionRight","min","intersectionTop","intersectionBottom","area","calcPos","targetDimensions","result","mainOffset","main","isHaveTooltip","secondaryOffset","second","mainDirection","secondaryDirection","directions","isHeightAvailable","i","heightToEdge","overflow","newPopupDimensions","fitContainerFactor","bestDirection","bestPosition","bestHeight","bestFitContainerFactor","isHeightAdaptive","contentHeight"],"mappings":";;;;;QA8DgBA,oB,GAAAA,oB;QA8EAC,0B,GAAAA,0B;QAiIAC,qB,GAAAA,qB;AA7QhB;;;;AAIA,IAAMC,2BAA2B,IAAjC;AACA,IAAMC,mBAAmB,EAAzB;;AAEA,IAAMC,qBAAqB,CACvB,aADuB,EACR,eADQ,EACS,cADT,EAEvB,UAFuB,EAEX,YAFW,EAEG,WAFH,EAGvB,WAHuB,EAGV,cAHU,EAGM,cAHN,EAIvB,UAJuB,EAIX,aAJW,EAII,aAJJ,CAA3B;;AAOA;;;;;;;AAOA;;;;;;;AAOA;;;;;;;;;;AAUA;;;;AAIA,SAASC,gBAAT,CAA0BC,SAA1B,EAAqC;AACjC,QAAIC,mBAAmBD,UAAUE,OAAV,CAAkB,GAAlB,CAAvB;AACA,WAAQD,qBAAqB,CAAC,CAAvB,IAA6BD,UAAUG,MAAV,CAAiB,CAAjB,EAAoBF,gBAApB,CAApC;AACH;;AAED;;;;AAIA,SAASG,qBAAT,CAA+BJ,SAA/B,EAA0C;AACtC,QAAIC,mBAAmBD,UAAUE,OAAV,CAAkB,GAAlB,CAAvB;AACA,WAAQD,qBAAqB,CAAC,CAAvB,IAA6BD,UAAUG,MAAV,CAAiBF,mBAAmB,CAApC,CAApC;AACH;;AAED;;;;;;AAMO,SAASR,oBAAT,CAA8BY,KAA9B,EAAqC;AACxC,QAAI,CAACA,MAAMC,cAAP,IAAyBD,MAAME,cAAnC,EAAmD;AAC/C,eAAO;AACHC,kBAAMH,MAAME,cAAN,CAAqBC,IADxB;AAEHC,iBAAKJ,MAAME,cAAN,CAAqBE,GAFvB;AAGHC,mBAAO,CAHJ;AAIHC,oBAAQ;AAJL,SAAP;AAMH;;AAED,QAAIC,SAASP,MAAMQ,YAAnB;AACA,QAAIC,aAAaF,OAAOG,qBAAP,EAAjB;AAXwC,QAYlCC,YAZkC,GAYjBX,KAZiB,CAYlCW,YAZkC;;;AAcxC,QAAIA,YAAJ,EAAkB;AACd,YAAIC,mBAAmBD,aAAaD,qBAAb,EAAvB;;AAEA,eAAO;AACHP,kBAAOM,WAAWN,IAAX,GAAkBS,iBAAiBT,IAApC,GAA4CQ,aAAaE,UAD5D;AAEHT,iBAAMK,WAAWL,GAAX,GAAiBQ,iBAAiBR,GAAnC,GAA0CO,aAAaG,SAFzD;AAGHT,mBAAOI,WAAWJ,KAHf;AAIHC,oBAAQG,WAAWH;AAJhB,SAAP;AAMH;;AAED,WAAO;AACHH,cAAMM,WAAWN,IAAX,GAAkBY,OAAOC,WAD5B;AAEHZ,aAAKK,WAAWL,GAAX,GAAiBW,OAAOE,WAF1B;AAGHZ,eAAOI,WAAWJ,KAHf;AAIHC,gBAAQG,WAAWH;AAJhB,KAAP;AAMH;;AAED;;;;;AAKA,SAASY,sBAAT,GAAkC;AAC9B,QAAIC,SAASJ,OAAOE,WAApB;AACA,QAAIG,UAAUL,OAAOC,WAArB;AACA,QAAIK,WAAWN,OAAOO,UAAtB;AACA,QAAIC,YAAYR,OAAOS,WAAvB;;AAEA,WAAO;AACHpB,aAAKe,MADF;AAEHhB,cAAMiB,OAFH;AAGHK,gBAAQN,SAASI,SAHd;AAIHG,eAAON,UAAUC;AAJd,KAAP;AAMH;;AAED;;;;;;AAMA,SAASM,uBAAT,CAAiCC,SAAjC,EAA4C;AACxC,QAAIC,eAAeD,UAAUd,SAA7B;AACA,QAAIgB,gBAAgBF,UAAUf,UAA9B;AACA,QAAIkB,kBAAkBH,UAAUI,YAAhC;AACA,QAAIC,iBAAiBL,UAAUM,WAA/B;;AAEA,WAAO;AACH9B,aAAKyB,YADF;AAEH1B,cAAM2B,aAFH;AAGHL,gBAAQI,eAAeE,eAHpB;AAIHL,eAAOI,gBAAgBG;AAJpB,KAAP;AAMH;;AAED;;;;;;AAMO,SAAS5C,0BAAT,CAAoCW,KAApC,EAA2C;AAAA,QACxCW,YADwC,GACvBX,KADuB,CACxCW,YADwC;;;AAG9C,WAAOA,eACDgB,wBAAwBhB,YAAxB,CADC,GAEDO,wBAFN;AAGH;;AAED;;;;;;;;;AASA,SAASiB,sBAAT,CAAgCC,QAAhC,EAA0CC,sBAA1C,EAAkEC,eAAlE,EAAmFtC,KAAnF,EAA0F;AACtF,QAAIuC,qBAAqBvC,MAAMwC,MAAN,CAAa7B,YAAtC;;AAEA,QAAI8B,mBAAmBC,KAAKC,GAAL,CACnBP,SAASjC,IADU,EAEnBkC,uBAAuBlC,IAAvB,GAA8BoC,kBAFX,CAAvB;;AAKA,QAAIK,oBAAoBF,KAAKG,GAAL,CACpBT,SAASjC,IAAT,GAAgBmC,gBAAgBjC,KADZ,EAEpBgC,uBAAuBX,KAAvB,GAA+Ba,kBAFX,CAAxB;;AAKA,QAAIO,kBAAkBJ,KAAKC,GAAL,CAClBP,SAAShC,GADS,EAElBiC,uBAAuBjC,GAAvB,GAA6BmC,kBAFX,CAAtB;;AAKA,QAAIQ,qBAAqBL,KAAKG,GAAL,CACrBT,SAAShC,GAAT,GAAekC,gBAAgBhC,MADV,EAErB+B,uBAAuBZ,MAAvB,GAAgCc,kBAFX,CAAzB;;AAKA,QAAKE,mBAAmBG,iBAApB,IAA2CE,kBAAkBC,kBAAjE,EAAsF;AAClF,eACI,CAACH,oBAAoBH,gBAArB,KAA0CM,qBAAqBD,eAA/D,CADG,GAEHR,gBAAgBU,IAFpB;AAGH;;AAED,WAAO,CAAP;AACH;;AAED;;;;;;;;;AASA,SAASC,OAAT,CAAiBtD,SAAjB,EAA4BuD,gBAA5B,EAA8CZ,eAA9C,EAA+DtC,KAA/D,EAAsE;AAClE,QAAImD,SAAS,EAAb;AACA,QAAIC,aAAapD,MAAMwC,MAAN,CAAaa,IAAb,IAAsBrD,MAAMsD,aAAN,IAAuB,EAA7C,IAAoD,CAArE;AACA,QAAIC,kBAAkBvD,MAAMwC,MAAN,CAAagB,MAAnC;;AAEA,QAAIC,gBAAgB/D,iBAAiBC,SAAjB,CAApB;AACA,QAAI+D,qBAAqB3D,sBAAsBJ,SAAtB,CAAzB;;AAEA,YAAQ8D,aAAR;AACI,aAAK,QAAL;AACIN,mBAAO/C,GAAP,GAAa8C,iBAAiB9C,GAAjB,GAAuB8C,iBAAiB5C,MAAxC,GAAiD8C,UAA9D;AACA;AACJ,aAAK,KAAL;AACID,mBAAO/C,GAAP,GAAa8C,iBAAiB9C,GAAjB,GAAuBkC,gBAAgBhC,MAAvC,GAAgD8C,UAA7D;AACA;AACJ,aAAK,MAAL;AACID,mBAAOhD,IAAP,GAAc+C,iBAAiB/C,IAAjB,GAAwBmC,gBAAgBjC,KAAxC,GAAgD+C,UAA9D;AACA;AACJ,aAAK,OAAL;AACID,mBAAOhD,IAAP,GAAc+C,iBAAiB/C,IAAjB,GAAwB+C,iBAAiB7C,KAAzC,GAAiD+C,UAA/D;AACA;AACJ;AACI;AAdR;;AAiBA,YAAQM,kBAAR;AACI,aAAK,OAAL;AACIP,mBAAOhD,IAAP,GAAe+C,iBAAiB/C,IAAjB,GAAwB+C,iBAAiB7C,KAA1C,GAAmDiC,gBAAgBjC,KAAnE,GAA2EkD,eAAzF;AACA;AACJ,aAAK,MAAL;AACIJ,mBAAOhD,IAAP,GAAc+C,iBAAiB/C,IAAjB,GAAwBoD,eAAtC;AACA;AACJ,aAAK,QAAL;AACIJ,mBAAO/C,GAAP,GAAc8C,iBAAiB9C,GAAjB,GAAuB8C,iBAAiB5C,MAAzC,GAAmDgC,gBAAgBhC,MAAnE,GAA4EiD,eAAzF;AACA;AACJ,aAAK,KAAL;AACIJ,mBAAO/C,GAAP,GAAa8C,iBAAiB9C,GAAjB,GAAuBmD,eAApC;AACA;AACJ,aAAK,QAAL;AACI,oBAAQE,aAAR;AACI,qBAAK,KAAL;AACA,qBAAK,QAAL;AACIN,2BAAOhD,IAAP,GAAc+C,iBAAiB/C,IAAjB,IACT+C,iBAAiB7C,KAAjB,GAAyB,CAA1B,GAAgCiC,gBAAgBjC,KAAhB,GAAwB,CAD9C,CAAd;AAGA;AACJ,qBAAK,MAAL;AACA,qBAAK,OAAL;AACI8C,2BAAO/C,GAAP,GAAa8C,iBAAiB9C,GAAjB,IACR8C,iBAAiB5C,MAAjB,GAA0B,CAA3B,GAAiCgC,gBAAgBhC,MAAhB,GAAyB,CADjD,CAAb;AAGA;AACJ;AACI;AAdR;AAgBA;AACJ;AACI;AAhCR;;AAmCA,WAAO6C,MAAP;AACH;;AAED;;;;;;;;AAQO,SAAS7D,qBAAT,CAA+BU,KAA/B,EAAsCkD,gBAAtC,EAAwDb,sBAAxD,EAAgF;AACnF,QAAIC,kBAAkB;AAClBjC,eAAOL,MAAMK,KADK;AAElBC,gBAAQN,MAAMM,MAFI;AAGlB0C,cAAMhD,MAAMK,KAAN,GAAcL,MAAMM;AAHR,KAAtB;AAKA,QAAIqD,aAAa3D,MAAM2D,UAAN,GACP3D,MAAM2D,UADC,GAEN3D,MAAM4D,iBAAN,IAA2B,CAAC,UAAD,CAA5B,IAA6CnE,kBAFvD;AAGA,QAAIoE,IAAI,CAAR;AACA,QAAIlE,YAAY,EAAhB;AACA,QAAImE,eAAe,CAAnB;AACA,QAAIxD,SAAS,CAAb;AACA,QAAIyD,WAAW,KAAf;AACA,QAAIC,qBAAqB,EAAzB;AACA,QAAI5B,WAAW,EAAf;AACA,QAAI6B,qBAAqB,CAAzB;AACA,QAAIC,gBAAgB,EAApB;AACA,QAAIC,eAAe,EAAnB;AACA,QAAIC,aAAa,CAAjB;AACA,QAAIC,yBAAyB,CAA7B;;AAEA,WAAOV,WAAWE,CAAX,CAAP,EAAsB;AAClBlE,oBAAYgE,WAAWE,CAAX,CAAZ;AACAA,aAAK,CAAL;;AAEA,YAAInE,iBAAiBC,SAAjB,MAAgC,KAApC,EAA2C;AACvCmE,2BAAeZ,iBAAiB9C,GAAjB,GAAuBiC,uBAAuBjC,GAA7D;AACH,SAFD,MAEO,IAAIV,iBAAiBC,SAAjB,MAAgC,QAApC,EAA8C;AACjDmE,2BAAezB,uBAAuBZ,MAAvB,IAAiCyB,iBAAiB9C,GAAjB,GAAuB8C,iBAAiB5C,MAAzE,CAAf;AACH;;AAED,YAAIN,MAAMsE,gBAAV,EAA4B;AACxB,gBAAItE,MAAMuE,aAAN,GAAsBT,YAA1B,EAAwC;AACpCxD,yBAASwD,YAAT;AACAC,2BAAW,IAAX;AACH,aAHD,MAGO;AACHzD,yBAASN,MAAMuE,aAAf;AACAR,2BAAW,KAAX;AACH;;AAEDC,iCAAqB;AACjB3D,uBAAOL,MAAMK,KADI;AAEjBC,8BAFiB;AAGjB0C,sBAAMhD,MAAMK,KAAN,GAAcC;AAHH,aAArB;AAKH;;AAED8B,mBAAWa,QAAQtD,SAAR,EAAmBuD,gBAAnB,EAAqC5C,SAAS0D,kBAAT,GAA8B1B,eAAnE,EAAoFtC,KAApF,CAAX;AACAiE,6BAAqB9B,uBAAuBC,QAAvB,EAAiCC,sBAAjC,EAAyDC,eAAzD,EAA0EtC,KAA1E,CAArB;;AAEA,YAAI6D,MAAM,CAAN,IACAI,qBAAqBI,sBADrB,IAEC,CAACA,sBAAD,IAA2BrE,MAAMkE,aAFtC,EAGE;AACEG,qCAAyBJ,kBAAzB;AACAC,4BAAgBvE,SAAhB;AACAwE,2BAAe/B,QAAf;AACAgC,yBAAa9D,MAAb;AACH;;AAED,YAAI+D,yBAAyB9E,wBAA7B,EAAuD;AACnD;AACH;AACJ;;AAED,QAAIS,MAAMsE,gBAAN,IAA0BtE,MAAMuE,aAAN,GAAsBT,YAApD,EAAkE;AAC9D,YAAIpE,iBAAiBwE,aAAjB,MAAoC,KAAxC,EAA+C;AAC3CC,yBAAa/D,GAAb,IAAoBZ,gBAApB;AACA4E,0BAAc5E,gBAAd;AACH,SAHD,MAGO,IAAIE,iBAAiBwE,aAAjB,MAAoC,QAAxC,EAAkD;AACrDE,0BAAc5E,gBAAd;AACH;AACJ;;AAED,WAAO;AACHG,mBAAWuE,aADR;AAEH/D,cAAMgE,aAAahE,IAFhB;AAGHC,aAAK+D,aAAa/D,GAHf;AAIHE,gBAAQ8D,cAAc,MAJnB;AAKHL;AALG,KAAP;AAOH","file":"calc-drawing-params.js","sourcesContent":["/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/. */\n\nconst VIEWPORT_ACCURACY_FACTOR = 0.99;\nconst VIEWPORT_PADDING = 20;\n\nconst DEFAULT_DIRECTIONS = [\n    'bottom-left', 'bottom-center', 'bottom-right',\n    'top-left', 'top-center', 'top-right',\n    'right-top', 'right-center', 'right-bottom',\n    'left-top', 'left-center', 'left-bottom'\n];\n\n/**\n * @typedef {Object} DrawingParams\n * @property {String} direction Направление отрисовки\n * @property {Number} left Положение по горизонтали\n * @property {Number} top Положение по вертикали\n */\n\n/**\n * @typedef {Object} PopupDimension\n * @property {Number} width Ширина попапа\n * @property {Number} height Высота попапа\n * @property {Number} area Площадь попапа\n */\n\n/**\n * @typedef {Object} Rect\n * @property {Number} top\n * @property {Number} left\n * @property {Number} [bottom]\n * @property {Number} [right]\n * @property {Number} [width]\n * @property {Number} [height]\n */\n\n/**\n * @param {String} direction Направление отрисовки\n * @returns {String|Boolean}\n */\nfunction getMainDirection(direction) {\n    let deliveryPosition = direction.indexOf('-');\n    return (deliveryPosition !== -1) && direction.substr(0, deliveryPosition);\n}\n\n/**\n * @param {String} direction Направление отрисовки\n * @returns {String|Boolean}\n */\nfunction getSecondaryDirection(direction) {\n    let deliveryPosition = direction.indexOf('-');\n    return (deliveryPosition !== -1) && direction.substr(deliveryPosition + 1);\n}\n\n/**\n * Высчитывает координаты блока, который является таргетом поп-апа.\n *\n * @param {PopupHash} popup Набор параметров попапа\n * @returns {Rect}\n */\nexport function calcTargetDimensions(popup) {\n    if (!popup.isTargetAnchor && popup.targetPosition) {\n        return {\n            left: popup.targetPosition.left,\n            top: popup.targetPosition.top,\n            width: 0,\n            height: 0\n        };\n    }\n\n    let anchor = popup.targetAnchor;\n    let anchorRect = anchor.getBoundingClientRect();\n    let { fitContainer } = popup;\n\n    if (fitContainer) {\n        let fitContainerRect = fitContainer.getBoundingClientRect();\n\n        return {\n            left: (anchorRect.left - fitContainerRect.left) + fitContainer.scrollLeft,\n            top: (anchorRect.top - fitContainerRect.top) + fitContainer.scrollTop,\n            width: anchorRect.width,\n            height: anchorRect.height\n        };\n    }\n\n    return {\n        left: anchorRect.left + window.pageXOffset,\n        top: anchorRect.top + window.pageYOffset,\n        width: anchorRect.width,\n        height: anchorRect.height\n    };\n}\n\n/**\n * Рассчитывает размеры и координаты расположения viewport.\n *\n * @returns {Rect}\n */\nfunction calcViewportDimensions() {\n    let winTop = window.pageYOffset;\n    let winLeft = window.pageXOffset;\n    let winWidth = window.innerWidth;\n    let winHeight = window.innerHeight;\n\n    return {\n        top: winTop,\n        left: winLeft,\n        bottom: winTop + winHeight,\n        right: winLeft + winWidth\n    };\n}\n\n/**\n * Высчитывает размеры и координаты расположения контейнера, в котором рендерится Popup.\n *\n * @param {HTMLElement} container контейнер, в котором будет позиционирован Popup\n * @returns {Rect}\n */\nfunction calcContainerDimensions(container) {\n    let containerTop = container.scrollTop;\n    let containerLeft = container.scrollLeft;\n    let containerHeight = container.offsetHeight;\n    let containerWidth = container.offsetWidth;\n\n    return {\n        top: containerTop,\n        left: containerLeft,\n        bottom: containerTop + containerHeight,\n        right: containerLeft + containerWidth\n    };\n}\n\n/**\n * Определяет контейнер, в котором рендерится Popup и возвращает его размеры и координаты.\n *\n * @param {PopupHash} popup Набор параметров попапа\n * @returns {Rect}\n */\nexport function calcFitContainerDimensions(popup) {\n    let { fitContainer } = popup;\n\n    return fitContainer\n        ? calcContainerDimensions(fitContainer)\n        : calcViewportDimensions();\n}\n\n/**\n * Рассчитывает пересечения Popup и контейнера, в котором он рендерится.\n *\n * @param {Point} position Позиция\n * @param {Rect} fitContainerDimensions Размеры контейнера, в который будет рендерится Popup\n * @param {PopupDimension} popupDimensions Размеры попапа\n * @param {PopupHash} popup Набор параметров попапа\n * @returns {Number}\n */\nfunction calcFitContainerFactor(position, fitContainerDimensions, popupDimensions, popup) {\n    let fitContainerOffset = popup.offset.fitContainer;\n\n    let intersectionLeft = Math.max(\n        position.left,\n        fitContainerDimensions.left + fitContainerOffset\n    );\n\n    let intersectionRight = Math.min(\n        position.left + popupDimensions.width,\n        fitContainerDimensions.right - fitContainerOffset\n    );\n\n    let intersectionTop = Math.max(\n        position.top,\n        fitContainerDimensions.top + fitContainerOffset\n    );\n\n    let intersectionBottom = Math.min(\n        position.top + popupDimensions.height,\n        fitContainerDimensions.bottom - fitContainerOffset\n    );\n\n    if ((intersectionLeft < intersectionRight) && (intersectionTop < intersectionBottom)) {\n        return (\n            (intersectionRight - intersectionLeft) * (intersectionBottom - intersectionTop)\n        ) / popupDimensions.area;\n    }\n\n    return 0;\n}\n\n/**\n * Возвращает значения для позиционирования Popup в конкретной позиции.\n *\n * @param {String} direction Направление отрисовки\n * @param {Rect} targetDimensions Область отрисовки якорного элемента\n * @param {PopupDimension} popupDimensions Размеры попапа\n * @param {PopupHash} popup Набор параметров попапа\n * @returns {Point}\n */\nfunction calcPos(direction, targetDimensions, popupDimensions, popup) {\n    let result = {};\n    let mainOffset = popup.offset.main || (popup.isHaveTooltip && 13) || 0;\n    let secondaryOffset = popup.offset.second;\n\n    let mainDirection = getMainDirection(direction);\n    let secondaryDirection = getSecondaryDirection(direction);\n\n    switch (mainDirection) {\n        case 'bottom':\n            result.top = targetDimensions.top + targetDimensions.height + mainOffset;\n            break;\n        case 'top':\n            result.top = targetDimensions.top - popupDimensions.height - mainOffset;\n            break;\n        case 'left':\n            result.left = targetDimensions.left - popupDimensions.width - mainOffset;\n            break;\n        case 'right':\n            result.left = targetDimensions.left + targetDimensions.width + mainOffset;\n            break;\n        default:\n            break;\n    }\n\n    switch (secondaryDirection) {\n        case 'right':\n            result.left = (targetDimensions.left + targetDimensions.width) - popupDimensions.width - secondaryOffset;\n            break;\n        case 'left':\n            result.left = targetDimensions.left + secondaryOffset;\n            break;\n        case 'bottom':\n            result.top = (targetDimensions.top + targetDimensions.height) - popupDimensions.height - secondaryOffset;\n            break;\n        case 'top':\n            result.top = targetDimensions.top + secondaryOffset;\n            break;\n        case 'center':\n            switch (mainDirection) {\n                case 'top':\n                case 'bottom':\n                    result.left = targetDimensions.left + (\n                        (targetDimensions.width / 2) - (popupDimensions.width / 2)\n                    );\n                    break;\n                case 'left':\n                case 'right':\n                    result.top = targetDimensions.top + (\n                        (targetDimensions.height / 2) - (popupDimensions.height / 2)\n                    );\n                    break;\n                default:\n                    break;\n            }\n            break;\n        default:\n            break;\n    }\n\n    return result;\n}\n\n/**\n * Рассчитывает наилучшие значения для позиционирования Popup.\n *\n * @param {PopupHash} popup Набор параметров попапа\n * @param {Rect} targetDimensions Область отрисовки якорного элемента\n * @param {Rect} fitContainerDimensions Размеры вьюпорта\n * @returns {DrawingParams}\n */\nexport function calcBestDrawingParams(popup, targetDimensions, fitContainerDimensions) {\n    let popupDimensions = {\n        width: popup.width,\n        height: popup.height,\n        area: popup.width * popup.height\n    };\n    let directions = popup.directions\n            ? popup.directions\n            : (popup.isHeightAvailable && ['top-left']) || DEFAULT_DIRECTIONS;\n    let i = 0;\n    let direction = '';\n    let heightToEdge = 0;\n    let height = 0;\n    let overflow = false;\n    let newPopupDimensions = {};\n    let position = {};\n    let fitContainerFactor = 0;\n    let bestDirection = '';\n    let bestPosition = {};\n    let bestHeight = 0;\n    let bestFitContainerFactor = 0;\n\n    while (directions[i]) {\n        direction = directions[i];\n        i += 1;\n\n        if (getMainDirection(direction) === 'top') {\n            heightToEdge = targetDimensions.top - fitContainerDimensions.top;\n        } else if (getMainDirection(direction) === 'bottom') {\n            heightToEdge = fitContainerDimensions.bottom - (targetDimensions.top + targetDimensions.height);\n        }\n\n        if (popup.isHeightAdaptive) {\n            if (popup.contentHeight > heightToEdge) {\n                height = heightToEdge;\n                overflow = true;\n            } else {\n                height = popup.contentHeight;\n                overflow = false;\n            }\n\n            newPopupDimensions = {\n                width: popup.width,\n                height,\n                area: popup.width * height\n            };\n        }\n\n        position = calcPos(direction, targetDimensions, height ? newPopupDimensions : popupDimensions, popup);\n        fitContainerFactor = calcFitContainerFactor(position, fitContainerDimensions, popupDimensions, popup);\n\n        if (i === 1 ||\n            fitContainerFactor > bestFitContainerFactor ||\n            (!bestFitContainerFactor && popup.bestDirection)\n        ) {\n            bestFitContainerFactor = fitContainerFactor;\n            bestDirection = direction;\n            bestPosition = position;\n            bestHeight = height;\n        }\n\n        if (bestFitContainerFactor > VIEWPORT_ACCURACY_FACTOR) {\n            break;\n        }\n    }\n\n    if (popup.isHeightAdaptive && popup.contentHeight > heightToEdge) {\n        if (getMainDirection(bestDirection) === 'top') {\n            bestPosition.top += VIEWPORT_PADDING;\n            bestHeight -= VIEWPORT_PADDING;\n        } else if (getMainDirection(bestDirection) === 'bottom') {\n            bestHeight -= VIEWPORT_PADDING;\n        }\n    }\n\n    return {\n        direction: bestDirection,\n        left: bestPosition.left,\n        top: bestPosition.top,\n        height: bestHeight || 'auto',\n        overflow\n    };\n}\n"]}