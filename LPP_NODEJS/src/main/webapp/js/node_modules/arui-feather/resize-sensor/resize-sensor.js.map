{"version":3,"sources":["resize-sensor/resize-sensor.jsx"],"names":["ResizeSensor","iframe","contentWindow","addEventListener","handleResize","removeEventListener","iframeStyle","position","top","left","width","height","background","border","zIndex","props","onResize","Component","propTypes","func"],"mappings":";;;;;;;;2CAAA;;;;AAIA;;AACA;;;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA;;;;;;;;IAQMA,Y;;;;;;;;;;;4CAWkB;AAChB,iBAAKC,MAAL,CAAYC,aAAZ,CAA0BC,gBAA1B,CAA2C,QAA3C,EAAqD,KAAKC,YAA1D;AACH;;AAPD;;;;;;+CASuB;AACnB,iBAAKH,MAAL,CAAYC,aAAZ,CAA0BG,mBAA1B,CAA8C,QAA9C,EAAwD,KAAKD,YAA7D;AACH;;;iCAEQ;AAAA;;AACL,gBAAIE,cAAc;AACdC,0BAAU,UADI;AAEdC,qBAAK,CAFS;AAGdC,sBAAM,CAHQ;AAIdC,uBAAO,MAJO;AAKdC,wBAAQ,MALM;AAMdC,4BAAY,aANE;AAOdC,wBAAQ,MAPM;AAQdC,wBAAQ,CAAC;AARK,aAAlB;;AAWA,mBACI;AACI,qBAAM,aAACb,MAAD,EAAY;AAAE,2BAAKA,MAAL,GAAcA,MAAd;AAAuB,iBAD/C;AAEI,uBAAQK,WAFZ;AAGI,0BAAS;AAHb,cADJ;AAOH;;;uCAGc;AACX,gBAAI,KAAKS,KAAL,CAAWC,QAAf,EAAyB;AACrB,qBAAKD,KAAL,CAAWC,QAAX;AACH;AACJ;;;;EA7CsB,gBAAMC,S,WACtBC,S,GAAY;AACf;AACAF,cAAU,oBAAKG;AAFA,C;kBA+CRnB,Y","file":"resize-sensor.js","sourcesContent":["/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/. */\n\nimport { autobind } from 'core-decorators';\nimport React from 'react';\nimport Type from 'prop-types';\n\n/**\n * Компонент позволяющий слушать изменения размера родительского элемента.\n * Для использования разместите его в элементе об изменении размера, которого\n * вы хотите знать и добавьте внешний обработчик `onResize`.\n *\n * Важно! Элемент, размер которого вы хотите измерять, должен обладать\n * css свойством `position: relative;`.\n */\nclass ResizeSensor extends React.Component {\n    static propTypes = {\n        /** Callback на изменение размера родителя */\n        onResize: Type.func\n    };\n\n    /**\n     * @type {HTMLIFrameElement}\n     */\n    iframe;\n\n    componentDidMount() {\n        this.iframe.contentWindow.addEventListener('resize', this.handleResize);\n    }\n\n    componentWillUnmount() {\n        this.iframe.contentWindow.removeEventListener('resize', this.handleResize);\n    }\n\n    render() {\n        let iframeStyle = {\n            position: 'absolute',\n            top: 0,\n            left: 0,\n            width: '100%',\n            height: '100%',\n            background: 'transparent',\n            border: 'none',\n            zIndex: -1\n        };\n\n        return (\n            <iframe\n                ref={ (iframe) => { this.iframe = iframe; } }\n                style={ iframeStyle }\n                tabIndex='-1'\n            />\n        );\n    }\n\n    @autobind\n    handleResize() {\n        if (this.props.onResize) {\n            this.props.onResize();\n        }\n    }\n}\n\nexport default ResizeSensor;\n"]}