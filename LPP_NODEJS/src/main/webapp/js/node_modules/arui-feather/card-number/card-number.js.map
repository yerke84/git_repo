{"version":3,"sources":["card-number/card-number.jsx"],"names":["CardNumber","cn","renderNumber","value","props","children","splittedValue","replace","split","length","number","numberBlockList","i","push","substring","join","trim","dot","renderDot","cardNumberStart","dot1","dot2","dot3","dot4","cardNumberEnd","undefined","Component","propTypes","oneOfType","string","theme","oneOf","className","func"],"mappings":";;;;;;;;yCAAA;;;;AAIA;;;;AACA;;;;AACA;;;;AAEA;;;;AACA;;;;;;;;;;;;AAEA;;;;IAMMA,U,WAFL,kBAAG,aAAH,C,UACA,4B;;;;;;;;;;;+BAaUC,E,EAAI;AACP,mBACI;AAAA;AAAA,kBAAM,WAAYA,EAAlB;AACM,qBAAKC,YAAL,CAAkBD,EAAlB;AADN,aADJ;AAKH;;;qCAEYA,E,EAAI;AACb,gBAAIE,QAAQ,KAAKC,KAAL,CAAWC,QAAX,IAAuB,KAAKD,KAAL,CAAWD,KAA9C;AACA,gBAAIA,KAAJ,EAAW;AACP,oBAAIG,gBAAgBH,MAAMI,OAAN,CAAc,IAAd,EAAoB,EAApB,EAAwBC,KAAxB,CAA8B,KAA9B,CAApB;;AAEA,oBAAIF,cAAcG,MAAd,KAAyB,CAA7B,EAAgC;AAC5B;AACA,wBAAIC,SAASJ,cAAc,CAAd,CAAb;;AAEA,wBAAII,OAAOD,MAAP,IAAiB,EAArB,EAAyB;AACrB,4BAAIE,kBAAkB,EAAtB;;AAEA,6BAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAI,CAApB,EAAuBA,GAAvB,EAA4B;AACxBD,4CAAgBE,IAAhB,CAAqBH,OAAOI,SAAP,CAAiB,IAAIF,CAArB,EAAwB,KAAKA,IAAI,CAAT,CAAxB,CAArB;AACH;AACDD,wCAAgBE,IAAhB,CAAqBH,OAAOI,SAAP,CAAiB,EAAjB,EAAqBJ,OAAOD,MAA5B,CAArB;;AAEA,+BAAOE,gBAAgBI,IAAhB,CAAqB,GAArB,CAAP;AACH;;AAED;AACA,2BAAOL,MAAP;AACH;;AAED;AACA,oBAAIJ,cAAc,CAAd,CAAJ,EAAsB;AAClBA,kCAAc,CAAd,IAAmBA,cAAc,CAAd,EAAiBU,IAAjB,GAAwBF,SAAxB,CAAkC,CAAlC,EAAqC,CAArC,CAAnB;AACH;;AAED,oBAAIR,cAAc,CAAd,CAAJ,EAAsB;AAClBA,kCAAc,CAAd,IAAmBA,cAAc,CAAd,EAAiBU,IAAjB,GAAwBF,SAAxB,CAAkC,CAAlC,EAAqC,CAArC,CAAnB;AACH;;AAED,oBAAIG,MAAM,KAAKC,SAAL,CAAejB,EAAf,CAAV;AACA,uBAAO,yCAAe;AAClBkB,qCAAiB;AAAA;AAAA,0BAAM,WAAYlB,GAAG,mBAAH,CAAlB;AAA8CK,sCAAc,CAAd;AAA9C,qBADC;AAElBc,0BAAMH,GAFY;AAGlBI,0BAAMJ,GAHY;AAIlBK,0BAAML,GAJY;AAKlBM,0BAAMN,GALY;AAMlBO,mCAAe;AAAA;AAAA,0BAAM,WAAYvB,GAAG,iBAAH,CAAlB;AAA4CK,sCAAc,CAAd;AAA5C;AANG,iBAAf,CAAP;AAQH;;AAED,mBAAOmB,SAAP;AACH;;;kCAESxB,E,EAAI;AACV,mBACI,wCAAM,WAAYA,GAAG,KAAH,CAAlB,GADJ;AAGH;;;;EAvEoB,gBAAMyB,S,WACpBC,S,GAAY;AACf;AACAtB,cAAU,oBAAKuB,SAAL,CAAe,CAAC,oBAAKC,MAAN,EAAc,oBAAKnB,MAAnB,CAAf,CAFK;AAGf;AACAP,WAAO,oBAAKyB,SAAL,CAAe,CAAC,oBAAKC,MAAN,EAAc,oBAAKnB,MAAnB,CAAf,CAJQ;AAKf;AACAoB,WAAO,oBAAKC,KAAL,CAAW,CAAC,eAAD,EAAkB,eAAlB,CAAX,CANQ;AAOf;AACAC,eAAW,oBAAKJ,SAAL,CAAe,CAAC,oBAAKK,IAAN,EAAY,oBAAKJ,MAAjB,CAAf;AARI,C;kBAyER7B,U","file":"card-number.js","sourcesContent":["/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/. */\n\nimport createFragment from 'react-addons-create-fragment';\nimport React from 'react';\nimport Type from 'prop-types';\n\nimport cn from '../cn';\nimport performance from '../performance';\n\n/**\n * Компонент для отображения номера банковской карты.\n * Маскирует карту, если передать все 16 цифр номера карты.\n */\n@cn('card-number')\n@performance()\nclass CardNumber extends React.Component {\n    static propTypes = {\n        /** Номер карты */\n        children: Type.oneOfType([Type.string, Type.number]),\n        /** Номер карты */\n        value: Type.oneOfType([Type.string, Type.number]),\n        /** Тема компонента */\n        theme: Type.oneOf(['alfa-on-color', 'alfa-on-white']),\n        /** Дополнительный класс */\n        className: Type.oneOfType([Type.func, Type.string])\n    };\n\n    render(cn) {\n        return (\n            <span className={ cn }>\n                { this.renderNumber(cn) }\n            </span>\n        );\n    }\n\n    renderNumber(cn) {\n        let value = this.props.children || this.props.value;\n        if (value) {\n            let splittedValue = value.replace(/ /g, '').split(/\\*+/);\n\n            if (splittedValue.length === 1) {\n                // not masked value\n                let number = splittedValue[0];\n\n                if (number.length >= 16) {\n                    let numberBlockList = [];\n\n                    for (let i = 0; i < 3; i++) {\n                        numberBlockList.push(number.substring(4 * i, 4 * (i + 1)));\n                    }\n                    numberBlockList.push(number.substring(12, number.length));\n\n                    return numberBlockList.join(' ');\n                }\n\n                // to short for card number\n                return number;\n            }\n\n            // masked value\n            if (splittedValue[0]) {\n                splittedValue[0] = splittedValue[0].trim().substring(0, 4);\n            }\n\n            if (splittedValue[1]) {\n                splittedValue[1] = splittedValue[1].trim().substring(0, 4);\n            }\n\n            let dot = this.renderDot(cn);\n            return createFragment({\n                cardNumberStart: <span className={ cn('card-number-start') }>{ splittedValue[0] }</span>,\n                dot1: dot,\n                dot2: dot,\n                dot3: dot,\n                dot4: dot,\n                cardNumberEnd: <span className={ cn('card-number-end') }>{ splittedValue[1] }</span>\n            });\n        }\n\n        return undefined;\n    }\n\n    renderDot(cn) {\n        return (\n            <span className={ cn('dot') } />\n        );\n    }\n}\n\nexport default CardNumber;\n"]}