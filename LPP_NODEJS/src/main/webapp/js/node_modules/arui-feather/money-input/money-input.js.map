{"version":3,"sources":["money-input/money-input.jsx"],"names":["DEFAULT_FRACTION_SIZE","DEFAULT_INTEGER_SIZE","INTEGER_PART_SIZE","getValueParts","value","replace","split","slice","splitInteger","str","length","from","to","concat","MoneyInput","state","updateMaskByValue","getValue","nextProps","props","cn","Input","root","maskPattern","getMaxLength","handleProcessMaskInputEvent","handleChange","event","currentValue","mask","format","newValue","target","fractionPart","undefined","substring","setState","onChange","Number","focus","blur","scrollTo","integerPart","integerPartLength","Math","max","min","integerLength","Array","join","reverse","fractionLength","getControl","setMask","maxLength","floor","Component","propTypes","number","defaultProps"],"mappings":";;;;;;;;;;;;kEAAA;;;;AAIA;;AAEA;;AACA;;;;AACA;;;;AAEA;;;;AACA;;;;AAEA;;;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,IAAMA,wBAAwB,CAA9B;AACA,IAAMC,uBAAuB,CAA7B;AACA,IAAMC,oBAAoB,CAA1B;;AAEA;;;;;;;;AAQA,SAASC,aAAT,CAAuBC,KAAvB,EAA8B;AAC1B,WAAOA,MACFC,OADE,CACM,QADN,EACgB,GADhB,EACsB;AADtB,KAEFA,OAFE,CAEM,SAFN,EAEiB,EAFjB,EAEsB;AAFtB,KAGFC,KAHE,CAGI,GAHJ,EAGsB;AAHtB,KAIFC,KAJE,CAII,CAJJ,EAIO,CAJP,CAAP,CAD0B,CAKG;AAChC;;AAGD;;;;;;AAMA,SAASC,YAAT,CAAsBC,GAAtB,EAA2B;AACvB,QAAIA,IAAIC,MAAJ,IAAcR,iBAAlB,EAAqC;AACjC,eAAO,CAACO,GAAD,CAAP;AACH;;AAED,QAAIE,OAAOF,IAAIC,MAAJ,GAAaR,iBAAxB;AACA,QAAIU,KAAKH,IAAIC,MAAb;;AAEA,WAAO,CAACD,IAAIF,KAAJ,CAAUI,IAAV,EAAgBC,EAAhB,CAAD,EAAsBC,MAAtB,CAA6BL,aAAaC,IAAIF,KAAJ,CAAU,CAAV,EAAaI,IAAb,CAAb,CAA7B,CAAP;AACH;;AAED;;;;;IAOMG,U,WAFL,kBAAG,aAAH,kB,UACA,4B;;;;;;;;;;;;;;kMAeGC,K,GAAQ;AACJX,mBAAO;AADH,S;;;AAIR;;;;;AAKA;;;;;AAKA;;;;;;;6CAKqB;AACjB,iBAAKY,iBAAL,CAAuB,KAAKC,QAAL,EAAvB;AACH;;;kDAEyBC,S,EAAW;AACjC,gBAAI,KAAKC,KAAL,CAAWf,KAAX,KAAqBc,UAAUd,KAAnC,EAA0C;AACtC,qBAAKY,iBAAL,CAAuBE,UAAUd,KAAV,IAAmB,EAA1C;AACH;AACJ;;;+BAEMgB,E,EAAIC,K,EAAO;AAAA;;AACd,mBACI,8BAAC,KAAD,eACS,KAAKF,KADd;AAEI,qBAAM,aAACG,IAAD,EAAU;AAAE,2BAAKA,IAAL,GAAYA,IAAZ;AAAmB,iBAFzC;AAGI,sBAAO,KAAKC,WAHhB;AAII,uBAAQ,KAAKN,QAAL,EAJZ;AAKI,2BAAY,KAAKO,YAAL,EALhB;AAMI,yCAA0B,KAAKC,2BANnC;AAOI,0BAAW,KAAKC,YAPpB;AAQI,4BAAa,IARjB;AASI,2BAAYN;AAThB,eADJ;AAaH;;;oDAG2BO,K,EAAO;AAC/B,gBAAIC,eAAe,KAAKC,IAAL,CAAUC,MAAV,CAAiB,KAAKb,QAAL,EAAjB,CAAnB;AACA,gBAAIc,WAAWJ,MAAMK,MAAN,CAAa5B,KAA5B;;AAEA;AACA,gBAAI2B,SAASrB,MAAT,GAAkBkB,aAAalB,MAAnC,EAA2C;AAAA,qCAClBP,cAAc4B,QAAd,CADkB;AAAA;AAAA,oBAClCE,YADkC;;AAGvC;AACA;;;AACA,oBAAIA,iBAAiBC,SAAjB,IAA8BD,aAAavB,MAAb,KAAwB,CAA1D,EAA6D;AACzDqB,+BAAWA,SAASI,SAAT,CAAmB,CAAnB,EAAsBJ,SAASrB,MAAT,GAAkB,CAAxC,CAAX;AACAiB,0BAAMK,MAAN,CAAa5B,KAAb,GAAqB2B,QAArB;AACH;AACJ;;AAED,iBAAKf,iBAAL,CAAuBe,QAAvB;AACH;;;qCAGY3B,K,EAAO;AAChB,iBAAKgC,QAAL,CAAc,EAAEhC,YAAF,EAAd;;AAEA,gBAAI,KAAKe,KAAL,CAAWkB,QAAf,EAAyB;AACrB,qBAAKlB,KAAL,CAAWkB,QAAX,CAAoBjC,KAApB,EAA2BkC,OAAOlC,MAAMC,OAAN,CAAc,SAAd,EAAyB,EAAzB,EAA6BA,OAA7B,CAAqC,IAArC,EAA2C,GAA3C,CAAP,CAA3B;AACH;AACJ;;AAED;;;;;;;;gCAKQ;AACJ,iBAAKiB,IAAL,CAAUiB,KAAV;AACH;;AAED;;;;;;;;+BAKO;AACH,iBAAKjB,IAAL,CAAUkB,IAAV;AACH;;AAED;;;;;;;;mCAKW;AACP,iBAAKlB,IAAL,CAAUmB,QAAV;AACH;;AAED;;;;;;;;0CAKkBrC,K,EAAO;AAAA,kCACaD,cAAcC,KAAd,CADb;AAAA;AAAA,gBAChBsC,WADgB;AAAA,gBACHT,YADG;;AAGrB,gBAAIU,oBAAoBC,KAAKC,GAAL,CAASD,KAAKE,GAAL,CAASJ,YAAYhC,MAAZ,IAAsB,CAA/B,EAAkC,KAAKS,KAAL,CAAW4B,aAA7C,CAAT,CAAxB;AACA,iBAAKxB,WAAL,GAAmBf,aAAc,IAAIwC,KAAJ,CAAUL,oBAAoB,CAA9B,CAAD,CAAmCM,IAAnC,CAAwC,GAAxC,CAAb,EAA2DC,OAA3D,GAAqED,IAArE,CAA0E,GAA1E,CAAnB;;AAEA,gBAAIhB,iBAAiBC,SAAjB,IAA8B,KAAKf,KAAL,CAAWgC,cAAX,GAA4B,CAA9D,EAAiE;AAC7D,qBAAK5B,WAAL,UAAyB,IAAIyB,KAAJ,CAAU,KAAK7B,KAAL,CAAWgC,cAAX,GAA4B,CAAtC,CAAD,CAA2CF,IAA3C,CAAgD,GAAhD,CAAxB;AACH;;AAED,iBAAKpB,IAAL,GAAY,mBAAS,KAAKN,WAAd,CAAZ;;AAEA,gBAAI,KAAKD,IAAT,EAAe;AACX,qBAAKA,IAAL,CAAU8B,UAAV,GAAuBC,OAAvB,CAA+B,KAAK9B,WAApC;AACH;AACJ;;AAED;;;;;;;;uCAKe;AACX,gBAAI+B,YAAYV,KAAKW,KAAL,CAAW,CAAC,KAAKpC,KAAL,CAAW4B,aAAX,GAA2B,CAA5B,IAAiC7C,iBAA5C,IAAiE,KAAKiB,KAAL,CAAW4B,aAA5F;;AAEA,gBAAI,KAAK5B,KAAL,CAAWgC,cAAf,EAA+B;AAC3BG,6BAAa,IAAI,KAAKnC,KAAL,CAAWgC,cAA5B;AACH;;AAED,mBAAOG,SAAP;AACH;;AAED;;;;;;;;mCAKW;AACP,mBAAO,KAAKnC,KAAL,CAAWf,KAAX,KAAqB8B,SAArB,GAAiC,KAAKf,KAAL,CAAWf,KAA5C,GAAoD,KAAKW,KAAL,CAAWX,KAAtE;AACH;;;;EA/JoB,gBAAMoD,S,WACpBC,S,gBACA,gBAAMA,S;AACT;AACAV,mBAAe,oBAAKW,M;AACpB;AACAP,oBAAgB,oBAAKO;YAGlBC,Y,GAAe;AAClBR,oBAAgBnD,qBADE;AAElB+C,mBAAe9C;AAFG,C;kBAyJXa,U","file":"money-input.js","sourcesContent":["/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/. */\n\n/* eslint react/prop-types: 0 */\n\nimport { autobind } from 'core-decorators';\nimport React from 'react';\nimport Type from 'prop-types';\n\nimport Input from '../input/input';\nimport Mask from '../masked-input/mask';\n\nimport cn from '../cn';\nimport performance from '../performance';\n\nconst DEFAULT_FRACTION_SIZE = 2;\nconst DEFAULT_INTEGER_SIZE = 9;\nconst INTEGER_PART_SIZE = 3;\n\n/**\n * Возвращает целую и дробную часть значения в виде массива.\n * Если дробная часть не равна `undefined`, значит введена дробная часть\n * или хотя бы запятая.\n *\n * @param {String} value Значение\n * @returns {Array.<String>}\n */\nfunction getValueParts(value) {\n    return value\n        .replace(/[.бю]/g, ',')  // Заменяем точки, `б` и `ю` на запятые.\n        .replace(/[^\\d,]/g, '')  // Удаляем все, что не является цифрой или запятой.\n        .split(',')              // Разделяем по запятой.\n        .slice(0, 2);            // Отрезаем, если больше, чем один фрагмент после запятой.\n}\n\n\n/**\n * Сплитит интегер в группы по 3.\n *\n * @param {String} str Строка интегера\n * @returns {String}\n */\nfunction splitInteger(str) {\n    if (str.length <= INTEGER_PART_SIZE) {\n        return [str];\n    }\n\n    let from = str.length - INTEGER_PART_SIZE;\n    let to = str.length;\n\n    return [str.slice(from, to)].concat(splitInteger(str.slice(0, from)));\n}\n\n/**\n * Компонент поля для ввода суммы. Может принимать в качестве значения либо число, либо число с сотой долей\n *\n * @extends Input\n */\n@cn('money-input', Input)\n@performance()\nclass MoneyInput extends React.Component {\n    static propTypes = {\n        ...Input.propTypes,\n        /** Максимально допустимая длина значения до запятой */\n        integerLength: Type.number,\n        /** Максимально допустимая длина значения после запятой */\n        fractionLength: Type.number\n    };\n\n    static defaultProps = {\n        fractionLength: DEFAULT_FRACTION_SIZE,\n        integerLength: DEFAULT_INTEGER_SIZE\n    };\n\n    state = {\n        value: ''\n    };\n\n    /**\n     * @type {String}\n     */\n    maskPattern;\n\n    /**\n     * @type {InputMask.Pattern}\n     */\n    mask;\n\n    /**\n     * @type {Input}\n     */\n    root;\n\n    componentWillMount() {\n        this.updateMaskByValue(this.getValue());\n    }\n\n    componentWillReceiveProps(nextProps) {\n        if (this.props.value !== nextProps.value) {\n            this.updateMaskByValue(nextProps.value || '');\n        }\n    }\n\n    render(cn, Input) {\n        return (\n            <Input\n                { ...this.props }\n                ref={ (root) => { this.root = root; } }\n                mask={ this.maskPattern }\n                value={ this.getValue() }\n                maxLength={ this.getMaxLength() }\n                onProcessMaskInputEvent={ this.handleProcessMaskInputEvent }\n                onChange={ this.handleChange }\n                noValidate={ true }\n                className={ cn }\n            />\n        );\n    }\n\n    @autobind\n    handleProcessMaskInputEvent(event) {\n        let currentValue = this.mask.format(this.getValue());\n        let newValue = event.target.value;\n\n        // При удалении отрезаем запятую, если исчезла дробная часть.\n        if (newValue.length < currentValue.length) {\n            let [fractionPart] = getValueParts(newValue);\n\n            // `fractionPart !== undefined` - значит запятая введена, но\n            // `fractionPart.length === 0` - значит цифр после запятой нет.\n            if (fractionPart !== undefined && fractionPart.length === 0) {\n                newValue = newValue.substring(0, newValue.length - 1);\n                event.target.value = newValue;\n            }\n        }\n\n        this.updateMaskByValue(newValue);\n    }\n\n    @autobind\n    handleChange(value) {\n        this.setState({ value });\n\n        if (this.props.onChange) {\n            this.props.onChange(value, Number(value.replace(/[^\\d,]/g, '').replace(/,/g, '.')));\n        }\n    }\n\n    /**\n     * Устанавливает фокус на поле ввода.\n     *\n     * @public\n     */\n    focus() {\n        this.root.focus();\n    }\n\n    /**\n     * Убирает фокус с поля ввода.\n     *\n     * @public\n     */\n    blur() {\n        this.root.blur();\n    }\n\n    /**\n     * Скроллит страницу до поля ввода.\n     *\n     * @public\n     */\n    scrollTo() {\n        this.root.scrollTo();\n    }\n\n    /**\n     * Обновляет маску по значению: группирует целую часть в блоки по три символа.\n     *\n     * @param {String} value Значение\n     */\n    updateMaskByValue(value) {\n        let [integerPart, fractionPart] = getValueParts(value);\n\n        let integerPartLength = Math.max(Math.min(integerPart.length || 1, this.props.integerLength));\n        this.maskPattern = splitInteger((new Array(integerPartLength + 1)).join('1')).reverse().join(' ');\n\n        if (fractionPart !== undefined && this.props.fractionLength > 0) {\n            this.maskPattern += `,${(new Array(this.props.fractionLength + 1)).join('1')}`;\n        }\n\n        this.mask = new Mask(this.maskPattern);\n\n        if (this.root) {\n            this.root.getControl().setMask(this.maskPattern);\n        }\n    }\n\n    /**\n     * Расчитывает максимально допустимую длинну поля ввода.\n     *\n     * @returns {Number}\n     */\n    getMaxLength() {\n        let maxLength = Math.floor((this.props.integerLength - 1) / INTEGER_PART_SIZE) + this.props.integerLength;\n\n        if (this.props.fractionLength) {\n            maxLength += 1 + this.props.fractionLength;\n        }\n\n        return maxLength;\n    }\n\n    /**\n     * Возвращает актуальное значение для рендера.\n     *\n     * @returns {String}\n     */\n    getValue() {\n        return this.props.value !== undefined ? this.props.value : this.state.value;\n    }\n}\n\nexport default MoneyInput;\n"]}