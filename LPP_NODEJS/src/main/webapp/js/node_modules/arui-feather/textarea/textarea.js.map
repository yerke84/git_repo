{"version":3,"sources":["textarea/textarea.jsx"],"names":["Textarea","state","focused","value","props","defaultValue","cn","undefined","textareaProps","className","ref","control","autoComplete","autocomplete","disabled","id","name","tabIndex","placeholder","maxLength","onChange","handleChange","onFocus","handleFocus","onBlur","handleBlur","onPaste","handlePaste","autosize","size","width","resize","invalid","error","label","root","handleHeightChange","hint","setState","event","target","height","onHeightChange","focus","document","activeElement","blur","elementRect","getBoundingClientRect","targetY","top","window","pageYOffset","Component","propTypes","oneOfType","func","string","oneOf","bool","number","node","theme","defaultProps"],"mappings":"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","file":"textarea.js","sourcesContent":["/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/. */\n\nimport { autobind } from 'core-decorators';\nimport React from 'react';\nimport TextareaAutosize from 'react-textarea-autosize';\nimport Type from 'prop-types';\n\nimport cn from '../cn';\nimport performance from '../performance';\nimport scrollTo from '../lib/scroll-to';\nimport { SCROLL_TO_CORRECTION } from '../vars';\n\n/**\n * Компонент многострочного текстового ввода.\n */\n@cn('textarea')\n@performance()\nclass Textarea extends React.Component {\n    static propTypes = {\n        /** Дополнительный класс */\n        className: Type.oneOfType([Type.func, Type.string]),\n        /** Управление возможностью компонента занимать всю ширину родителя */\n        width: Type.oneOf(['default', 'available']),\n        /** Управление автозаполнением компонента */\n        autocomplete: Type.bool,\n        /** Управление возможностью изменения значения компонента */\n        disabled: Type.bool,\n        /** Управление возможностью подстраивать высоту компонента под высоту текста  */\n        autosize: Type.bool,\n        /** Максимальное число символов */\n        maxLength: Type.number,\n        /** Уникальный идентификатор блока */\n        id: Type.string,\n        /** Уникальное имя блока */\n        name: Type.string,\n        /** Содержимое поля ввода, указанное по умолчанию (используйте это поле если хотите использовать компонент как uncontrolled) */\n        defaultValue: Type.string,\n        /** Содержимое поля ввода */\n        value: Type.string,\n        /** Последовательность перехода между контролами при нажатии на Tab */\n        tabIndex: Type.number,\n        /** Лейбл для поля */\n        label: Type.node,\n        /** Подсказка в поле */\n        placeholder: Type.string,\n        /** Подсказка под полем */\n        hint: Type.node,\n        /** Отображение ошибки */\n        error: Type.node,\n        /** Размер компонента */\n        size: Type.oneOf(['s', 'm', 'l', 'xl']),\n        /** Управление возможностью изменения размеров компонента */\n        resize: Type.oneOf(['both', 'horizontal', 'vertical', 'none']),\n        /** Тема компонента */\n        theme: Type.oneOf(['alfa-on-color', 'alfa-on-white']),\n        /** Обработчик изменения значения 'value' */\n        onChange: Type.func,\n        /** Обработчик фокуса поля */\n        onFocus: Type.func,\n        /** Обработчик снятия фокуса c поля */\n        onBlur: Type.func,\n        /** Обработчик события вставки текста в поле */\n        onPaste: Type.func,\n        /** Обработчик события изменения высоты компонента со значением параметра \"autosize\" = true */\n        onHeightChange: Type.func\n    };\n\n    static defaultProps = {\n        width: 'default',\n        autocomplete: true,\n        disabled: false,\n        autosize: true,\n        resize: 'none',\n        size: 'm'\n    };\n\n    state = {\n        focused: false,\n        value: this.props.defaultValue || ''\n    };\n\n    /**\n     * @type {HtmlSpanElement}\n     */\n    root;\n\n    /**\n     * @type {HTMLTextareaElement}\n     */\n    control;\n\n    render(cn) {\n        let value = this.props.value !== undefined\n            ? this.props.value\n            : this.state.value;\n\n        let textareaProps = {\n            className: cn('control'),\n            ref: (control) => { this.control = control; },\n            autoComplete: this.props.autocomplete === false ? 'off' : 'on',\n            disabled: this.props.disabled,\n            id: this.props.id,\n            name: this.props.name,\n            value,\n            tabIndex: this.props.tabIndex,\n            placeholder: this.props.placeholder,\n            maxLength: this.props.maxLength,\n            onChange: this.handleChange,\n            onFocus: this.handleFocus,\n            onBlur: this.handleBlur,\n            onPaste: this.handlePaste\n        };\n        return (\n            <span\n                className={ cn({\n                    disabled: this.props.disabled,\n                    focused: this.state.focused,\n                    autosize: this.props.autosize,\n                    size: this.props.size,\n                    width: this.props.width,\n                    resize: this.props.resize,\n                    invalid: !!this.props.error,\n                    'has-label': !!this.props.label,\n                    'has-value': !!value\n                }) }\n                ref={ (root) => { this.root = root; } }\n            >\n                <span className={ cn('inner') }>\n                    {\n                        !!this.props.label &&\n                        <span className={ cn('top') }>\n                            { this.props.label }\n                        </span>\n                    }\n                    {\n                        !this.props.autosize\n                        ? <textarea { ...textareaProps } />\n                        : <TextareaAutosize\n                            { ...textareaProps }\n                            onHeightChange={ this.handleHeightChange }\n                        />\n                    }\n                    {\n                        (this.props.error || this.props.hint) &&\n                        <span className={ cn('sub') }>\n                            { this.props.error || this.props.hint }\n                        </span>\n                    }\n                </span>\n            </span>\n        );\n    }\n\n    @autobind\n    handleFocus() {\n        this.setState({ focused: true });\n\n        if (this.props.onFocus) {\n            this.props.onFocus();\n        }\n    }\n\n    @autobind\n    handleBlur(event) {\n        this.setState({ focused: false });\n\n        if (this.props.onBlur) {\n            this.props.onBlur(event);\n        }\n    }\n\n    @autobind\n    handleChange(event) {\n        let value = event.target.value;\n        this.setState({ value });\n\n        if (this.props.onChange) {\n            this.props.onChange(value);\n        }\n    }\n\n    @autobind\n    handlePaste(event) {\n        if (this.props.onPaste) {\n            this.props.onPaste(event);\n        }\n    }\n\n    @autobind\n    handleHeightChange(height) {\n        if (this.props.onHeightChange) {\n            this.props.onHeightChange(height);\n        }\n    }\n\n    /**\n     * Устанавливает фокус на поле ввода.\n     *\n     * @public\n     */\n    focus() {\n        this.control.focus();\n    }\n\n    /**\n     * Снимает фокус с поля ввода.\n     *\n     * @public\n     */\n    blur() {\n        if (document.activeElement) {\n            document.activeElement.blur();\n        }\n    }\n\n    /**\n     * Скроллит страницу до поля ввода.\n     *\n     * @public\n     */\n    scrollTo() {\n        let elementRect = this.root.getBoundingClientRect();\n\n        scrollTo({\n            targetY: (elementRect.top + window.pageYOffset) - SCROLL_TO_CORRECTION\n        });\n    }\n}\n\nexport default Textarea;\n"]}