{"version":3,"sources":["popup-container-provider/popup-container-provider.jsx"],"names":["PopupContainerProvider","state","didRender","isInCustomContainer","renderContainerElement","renderContainer","getNode","positioningContainerElement","positioningContainer","handleContainerDidRender","cn","props","style","children","setState","Component","propTypes","oneOfType","arrayOf","node","className","func","string","theme","oneOf","childContextTypes","bool"],"mappings":";;;;;;;;mCAAA;;;;AAIA;;;;AACA;;;;AACA;;;;AAEA;;;;AAEA;;;;AACA;;;;;;;;;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAgCMA,sB,WADL,kBAAG,iBAAH,C;;;;;;;;;;;;;;0NAmBGC,K,GAAQ;AACJC,uBAAW;AADP,S;;;;;0CAIU;AACd,mBAAO;AACHC,qCAAqB,IADlB;AAEHC,wCAAyB,KAAKC,eAAL,IAAwB,KAAKA,eAAL,CAAqBC,OAArB,EAF9C;AAGHC,6CAA6B,KAAKC;AAH/B,aAAP;AAKH;;;4CAEmB;AAChB,iBAAKC,wBAAL;AACH;;;+BAEMC,E,EAAI;AAAA;;AACP,mBACI;AAAA;AAAA;AACI,+BAAYA,EADhB;AAEI,yBAAM,aAACF,oBAAD,EAA0B;AAAE,+BAAKA,oBAAL,GAA4BA,oBAA5B;AAAmD,qBAFzF;AAGI,2BAAQ,KAAKG,KAAL,CAAWC;AAHvB;AAKM,qBAAKD,KAAL,CAAWE,QALjB;AAMI;AACI,yBAAM,aAACR,eAAD,EAAqB;AAAE,+BAAKA,eAAL,GAAuBA,eAAvB;AAAyC;AAD1E;AANJ,aADJ;AAYH;;AAED;;;;;;mDAG2B;AACvB,iBAAKS,QAAL,CAAc;AACVZ,2BAAW;AADD,aAAd;AAGH;;;;EAxDgC,gBAAMa,S,WAChCC,S,GAAY;AACf;AACAH,cAAU,oBAAKI,SAAL,CAAe,CAAC,oBAAKC,OAAL,CAAa,oBAAKC,IAAlB,CAAD,EAA0B,oBAAKA,IAA/B,CAAf,CAFK;AAGf;AACAC,eAAW,oBAAKH,SAAL,CAAe,CAAC,oBAAKI,IAAN,EAAY,oBAAKC,MAAjB,CAAf,CAJI;AAKf;AACAV,uCANe;AAOf;AACAW,WAAO,oBAAKC,KAAL,CAAW,CAAC,eAAD,EAAkB,eAAlB,CAAX;AARQ,C,UAWZC,iB,GAAoB;AACvBtB,yBAAqB,oBAAKuB,IADH;AAEvBtB,mDAFuB;AAGvBG;AAHuB,C;kBA+ChBP,sB","file":"popup-container-provider.js","sourcesContent":["/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/. */\n\nimport React from 'react';\nimport styleType from 'react-style-proptype';\nimport Type from 'prop-types';\n\nimport IsolatedContainer from '../isolated-container/isolated-container';\n\nimport cn from '../cn';\nimport { HtmlElement } from '../lib/prop-types';\n\n/**\n * Становится родительским элементом для всех дочерних блоков `Popup`.\n * Предполагается задавать этому элементу `position: fixed` в стилях.\n *\n * @example\n * ```javascript\n * import PopupContainerProvider from 'arui-feather/popup-container-provider';\n * import Popup from 'arui-feather/popup';\n * import Page from 'arui-feather/page';\n *\n *  <Page>\n *     <PopupContainerProvider\n *         style={\n *             {\n *                 position: 'fixed',\n *                 top: 0,\n *                 right: 0,\n *                 bottom: 0,\n *                 width: '400px',\n *                 overflow: 'auto'\n *             }\n *         }\n *     >\n *         <Popup>\n *             Попап отрендерился в PopupContainerProvider, а не в body\n *             При скролле внутри блока, попап ездит вместе с остальным контентом.\n *         </Popup>\n *     </PopupContainerProvider>\n *  </Page>\n * ```\n */\n@cn('popup-container')\nclass PopupContainerProvider extends React.Component {\n    static propTypes = {\n        /** Дочерние элементы контейнера */\n        children: Type.oneOfType([Type.arrayOf(Type.node), Type.node]),\n        /** Дополнительный класс */\n        className: Type.oneOfType([Type.func, Type.string]),\n        /** Объект со стилями */\n        style: styleType,\n        /** Тема компонента */\n        theme: Type.oneOf(['alfa-on-color', 'alfa-on-white'])\n    };\n\n    static childContextTypes = {\n        isInCustomContainer: Type.bool,\n        renderContainerElement: HtmlElement,\n        positioningContainerElement: HtmlElement\n    };\n\n    state = {\n        didRender: false\n    };\n\n    getChildContext() {\n        return {\n            isInCustomContainer: true,\n            renderContainerElement: (this.renderContainer && this.renderContainer.getNode()),\n            positioningContainerElement: this.positioningContainer\n        };\n    }\n\n    componentDidMount() {\n        this.handleContainerDidRender();\n    }\n\n    render(cn) {\n        return (\n            <div\n                className={ cn }\n                ref={ (positioningContainer) => { this.positioningContainer = positioningContainer; } }\n                style={ this.props.style }\n            >\n                { this.props.children }\n                <IsolatedContainer\n                    ref={ (renderContainer) => { this.renderContainer = renderContainer; } }\n                />\n            </div>\n        );\n    }\n\n    /**\n     * Необходимо для обновления childContext сразу после получения refs.\n     */\n    handleContainerDidRender() {\n        this.setState({\n            didRender: true\n        });\n    }\n}\n\nexport default PopupContainerProvider;\n"]}