{"version":3,"sources":["input/input.jsx"],"names":["Input","state","focused","value","cn","MaskedInput","hasAddons","props","rightAddons","leftAddons","undefined","content","renderContent","getFocused","type","disabled","size","width","label","icon","clear","invalid","error","root","hint","left","renderInput","right","isMaskedInput","mask","inputProps","className","noValidate","autoComplete","autocomplete","disabledAttr","maxLength","id","name","tabIndex","placeholder","pattern","ref","control","title","onChange","handleChange","onFocus","handleFocus","onClick","handleClick","onBlur","handleBlur","onKeyDown","handleKeyDown","onKeyUp","handleKeyUp","onPaste","handlePaste","onTouchStart","handleTouchStart","onTouchEnd","handleTouchEnd","onTouchMove","handleTouchMove","onTouchCancel","handleTouchCancel","box","maskFormatCharacters","onProcessMaskInputEvent","handleClearClick","event","setState","changeValue","target","onClearClick","focus","document","activeElement","blur","targetY","getBoundingClientRect","top","window","pageYOffset","start","end","length","setSelectionRange","Component","propTypes","oneOf","bool","number","node","string","objectOf","shape","validate","func","isRequired","transform","theme","oneOfType","defaultProps"],"mappings":"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","file":"input.js","sourcesContent":["/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/. */\n\nimport { autobind } from 'core-decorators';\nimport React from 'react';\nimport Type from 'prop-types';\n\nimport MaskedInput from '../masked-input/masked-input';\n\nimport cn from '../cn';\nimport performance from '../performance';\nimport scrollTo from '../lib/scroll-to';\nimport { SCROLL_TO_CORRECTION } from '../vars';\n\n/**\n * Компонент текстового поля ввода.\n */\n@cn('input', MaskedInput)\n@performance()\nclass Input extends React.Component {\n    static propTypes = {\n        /**\n         * Тип поля.\n         * Внимание, тип 'number' не умеет работать с масками, в том числе с 'selectionStart' и 'selectionEnd'.\n         * Подробнее: http://w3c.github.io/html/sec-forms.html#does-not-apply\n         */\n        type: Type.oneOf(['number', 'card', 'email', 'file', 'hidden', 'money', 'password', 'tel', 'text']),\n        /** Управление возможностью компонента занимать всю ширину родителя */\n        width: Type.oneOf(['default', 'available']),\n        /** Управление автозаполнением компонента */\n        autocomplete: Type.bool,\n        /** Управление возможностью изменения атрибута компонента, установка соответствующего класса-модификатора для оформления */\n        disabled: Type.bool,\n        /** Управление возможностью изменения атрибута компонента (без установки класса-модификатора для оформления) */\n        disabledAttr: Type.bool,\n        /** Управление возможностью изменения класса-модификатора компонента */\n        focused: Type.bool,\n        /** Максимальное число символов */\n        maxLength: Type.number,\n        /** Иконка компонента */\n        icon: Type.node,\n        /** Управление наличием крестика, сбрасывающего значение 'value' */\n        clear: Type.bool,\n        /** Уникальный идентификатор блока */\n        id: Type.string,\n        /** Уникальное имя блока */\n        name: Type.string,\n        /** Содержимое поля ввода, указанное по умолчанию */\n        value: Type.string,\n        /** Последовательность перехода между контролами при нажатии на Tab */\n        tabIndex: Type.number,\n        /** Определяет маску для ввода значений. [Шаблон маски](https://github.com/insin/inputmask-core#pattern) */\n        mask: Type.string,\n        /** Кастомные форматтеры символов маски, использует формат formatCharacters из `inputmask-core` */\n        maskFormatCharacters: Type.objectOf(\n            Type.shape({\n                validate: Type.func.isRequired,\n                transform: Type.func\n            })\n        ),\n        /** Стандартное ствойство HTMLInputElement 'pattern'. Может быть использовано для показа корректной клавиатуры на мобильных устройствах. */\n        pattern: Type.string,\n        /** Управление встроенной проверкой данных введённых пользователем в поле на корректность */\n        noValidate: Type.bool,\n        /** Добавление дополнительных элементов к инпуту слева */\n        leftAddons: Type.node,\n        /** Добавление дополнительных элементов к инпуту справа */\n        rightAddons: Type.node,\n        /** Лейбл для поля */\n        label: Type.node,\n        /** Подсказка в поле */\n        placeholder: Type.string,\n        /** Подсказка под полем */\n        hint: Type.node,\n        /** Отображение ошибки */\n        error: Type.node,\n        /** Размер компонента */\n        size: Type.oneOf(['s', 'm', 'l', 'xl']),\n        /** Тема компонента */\n        theme: Type.oneOf(['alfa-on-color', 'alfa-on-white']),\n        /** Дополнительный класс */\n        className: Type.oneOfType([Type.func, Type.string]),\n        /** Тултип, который появляется при наведении  */\n        title: Type.string,\n        /** Обработчик изменения значения 'value' */\n        onChange: Type.func,\n        /** Обработчик фокуса поля */\n        onFocus: Type.func,\n        /** Обработчик клика по полю */\n        onClick: Type.func,\n        /** Обработчик снятия фокуса с поля */\n        onBlur: Type.func,\n        /** Обработчик клика по крестику сбрасываещему значение 'value' */\n        onClearClick: Type.func,\n        /** Обработчик события нажатия на клавишу клавиатуры в момент, когда фокус находится на компоненте */\n        onKeyDown: Type.func,\n        /** Обработчик события отжатия на клавишу клавиатуры в момент, когда фокус находится на компоненте */\n        onKeyUp: Type.func,\n        /** Обработчик события вставки текста в поле */\n        onPaste: Type.func,\n        /** Обработчик события касания по полю */\n        onTouchStart: Type.func,\n        /** Обработчик события прекращения касания по полю */\n        onTouchEnd: Type.func,\n        /** Обработчик события перемещения при касании по полю */\n        onTouchMove: Type.func,\n        /** Обработчик события прерывания касания по полю */\n        onTouchCancel: Type.func,\n        /** Обработчик, вызываемый перед началом ввода в маскированное поле */\n        onProcessMaskInputEvent: Type.func\n    };\n\n    static defaultProps = {\n        noValidate: false,\n        size: 'm',\n        type: 'text'\n    };\n\n    state = {\n        focused: false,\n        value: ''\n    };\n\n    /**\n     * @type {HTMLSpanElement}\n     */\n    root;\n\n    /**\n     * @type {HTMLSpanElement}\n     */\n    box;\n\n    /**\n     * @type {HTMLInputElement}\n     */\n    control;\n\n    render(cn, MaskedInput) {\n        let hasAddons = !!this.props.rightAddons || !!this.props.leftAddons;\n        let value = this.props.value !== undefined\n            ? this.props.value\n            : this.state.value;\n\n        let content = this.renderContent(cn, MaskedInput);\n        if (hasAddons) {\n            content = <span className={ cn('addons-layout') }>{ content }</span>;\n        }\n\n        let focused = this.getFocused();\n\n        return (\n            <span\n                className={ cn({\n                    type: this.props.type,\n                    disabled: this.props.disabled,\n                    focused,\n                    size: this.props.size,\n                    width: this.props.width,\n                    'has-label': !!this.props.label,\n                    'has-value': !!value,\n                    'has-icon': !!this.props.icon,\n                    'has-clear': !!this.props.clear,\n                    'has-addons': hasAddons,\n                    invalid: !!this.props.error\n                }) }\n                ref={ (root) => { this.root = root; } }\n            >\n                <span className={ cn('inner') }>\n                    {\n                        !!this.props.label &&\n                        <span className={ cn('top') }>\n                            { this.props.label }\n                        </span>\n                    }\n                    { content }\n                    {\n                        (this.props.error || this.props.hint) &&\n                        <span className={ cn('sub') }>\n                            { this.props.error || this.props.hint }\n                        </span>\n                    }\n                </span>\n            </span>\n        );\n    }\n\n    renderContent(cn, MaskedInput) {\n        return ([\n            this.props.leftAddons &&\n                <span className={ cn('addons', { left: true }) } key='left-addons'>\n                    { this.props.leftAddons }\n                </span>,\n            this.renderInput(cn, MaskedInput),\n            this.props.rightAddons &&\n                <span className={ cn('addons', { right: true }) } key='right-addons'>\n                    { this.props.rightAddons }\n                </span>\n        ]);\n    }\n\n    renderInput(cn, MaskedInput) {\n        let isMaskedInput = this.props.mask !== undefined;\n        let value = this.props.value !== undefined\n            ? this.props.value\n            : this.state.value;\n\n        let inputProps = {\n            className: cn('control'),\n            type: this.props.type,\n            noValidate: this.props.noValidate,\n            autoComplete: this.props.autocomplete === false ? 'off' : 'on',\n            disabled: this.props.disabled || this.props.disabledAttr,\n            maxLength: this.props.maxLength,\n            id: this.props.id,\n            name: this.props.name,\n            value,\n            tabIndex: this.props.tabIndex,\n            placeholder: this.props.placeholder,\n            pattern: this.props.pattern,\n            ref: (control) => { this.control = control; },\n            title: this.props.title,\n            onChange: this.handleChange,\n            onFocus: this.handleFocus,\n            onClick: this.handleClick,\n            onBlur: this.handleBlur,\n            onKeyDown: this.handleKeyDown,\n            onKeyUp: this.handleKeyUp,\n            onPaste: this.handlePaste,\n            onTouchStart: this.handleTouchStart,\n            onTouchEnd: this.handleTouchEnd,\n            onTouchMove: this.handleTouchMove,\n            onTouchCancel: this.handleTouchCancel\n        };\n\n        return (\n            <span\n                className={ cn('box') }\n                key='input-wrapper'\n                ref={ (box) => { this.box = box; } }\n            >\n                {\n                    !isMaskedInput\n                        ? <input { ...inputProps } />\n                        : <MaskedInput\n                            { ...inputProps }\n                            mask={ this.props.mask }\n                            formatCharacters={ this.props.maskFormatCharacters }\n                            onProcessInputEvent={ this.props.onProcessMaskInputEvent }\n                        />\n                }\n                {\n                    this.props.clear && value &&\n                    <button\n                        className={ cn('clear') }\n                        onClick={ this.handleClearClick }\n                    />\n                }\n                {\n                    this.props.icon &&\n                    <span className={ cn('icon') }>\n                        { this.props.icon }\n                    </span>\n                }\n            </span>\n        );\n    }\n\n    @autobind\n    handleFocus(event) {\n        this.setState({ focused: true });\n\n        if (this.props.onFocus) {\n            this.props.onFocus(event);\n        }\n    }\n\n    @autobind\n    handleClick(event) {\n        if (this.props.onClick) {\n            this.props.onClick(event);\n        }\n    }\n\n    @autobind\n    handleBlur(event) {\n        this.setState({ focused: false });\n\n        if (this.props.onBlur) {\n            this.props.onBlur(event);\n        }\n    }\n\n    @autobind\n    handleChange(event) {\n        this.changeValue(event.target.value);\n    }\n\n    @autobind\n    handleClearClick() {\n        this.changeValue('');\n\n        if (this.props.onClearClick) {\n            this.props.onClearClick();\n        }\n\n        this.focus();\n    }\n\n    @autobind\n    handleKeyDown(event) {\n        if (this.props.onKeyDown) {\n            this.props.onKeyDown(event);\n        }\n    }\n\n    @autobind\n    handleKeyUp(event) {\n        if (this.props.onKeyUp) {\n            this.props.onKeyUp(event);\n        }\n    }\n\n    @autobind\n    handlePaste(event) {\n        if (this.props.onPaste) {\n            this.props.onPaste(event);\n        }\n    }\n\n    @autobind\n    handleTouchStart(event) {\n        if (this.props.onTouchStart) {\n            this.props.onTouchStart(event);\n        }\n    }\n\n    @autobind\n    handleTouchEnd(event) {\n        if (this.props.onTouchEnd) {\n            this.props.onTouchEnd(event);\n        }\n    }\n\n    @autobind\n    handleTouchMove(event) {\n        if (this.props.onTouchMove) {\n            this.props.onTouchMove(event);\n        }\n    }\n\n    @autobind\n    handleTouchCancel(event) {\n        if (this.props.onTouchCancel) {\n            this.props.onTouchCancel(event);\n        }\n    }\n\n    /**\n     * Возвращает корневой `HTMLElement` компонента.\n     *\n     * @public\n     * @returns {HTMLElement}\n     */\n    getNode() {\n        return this.root;\n    }\n\n    /**\n     * Возвращает ссылку на инстанс контейнера для контрола.\n     *\n     * @public\n     * @returns {HTMLSpanElement}\n     */\n    getBoxNode() {\n        return this.box;\n    }\n\n    /**\n     * Возвращает ссылку на инстанс контрола.\n     * Для полей ввода с маской ссылку на объект `MaskedInput`.\n     *\n     * @public\n     * @returns {HTMLInputElement|MaskedInput}\n     */\n    getControl() {\n        return this.control;\n    }\n\n    /**\n     * Устанавливает фокус на поле ввода.\n     *\n     * @public\n     */\n    focus() {\n        this.control.focus();\n    }\n\n    /**\n     * Убирает фокус с поля ввода.\n     *\n     * @public\n     */\n    blur() {\n        if (document.activeElement) {\n            document.activeElement.blur();\n        }\n    }\n\n    /**\n     * Скроллит страницу до поля ввода.\n     *\n     * @public\n     */\n    scrollTo() {\n        scrollTo({\n            targetY: (this.root.getBoundingClientRect().top + window.pageYOffset) - SCROLL_TO_CORRECTION\n        });\n    }\n\n    /**\n     * Устанавливает начальное и конечное положение выделения текста в элементе.\n     *\n     * @public\n     * @param {Number} [start=0] Индекс первого выделенного символа.\n     * @param {Number} [end=value.length] Индекс символа после последнего выделенного символа.\n     */\n    setSelectionRange(start = 0, end = this.control.value.length) {\n        this.control.setSelectionRange(start, end);\n    }\n\n    /**\n     * Изменяет текущение значение поля ввода и генерирует событие об этом.\n     *\n     * @param {String} value Новое значение\n     */\n    changeValue(value) {\n        this.setState({ value });\n\n        if (this.props.onChange) {\n            this.props.onChange(value);\n        }\n    }\n\n    /**\n     * Возвращает состояние фокуса.\n     *\n     * @returns {Boolean}\n     */\n    getFocused() {\n        return this.props.focused !== undefined ? this.props.focused : this.state.focused;\n    }\n}\n\nexport default Input;\n"]}