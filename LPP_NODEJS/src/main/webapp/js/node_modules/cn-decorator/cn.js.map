{"version":3,"sources":["cn.js"],"names":["getFunctionCn","cn","className","theme","resultCn","blockSelector","args","length","process","env","NODE_ENV","console","warn","push","apply","toString","create","themes","componentName","components","target","_cn","_cnComponents","prototype","hasOwnProperty","render","Error","contextTypes","string","childContextTypes","originalRender","currentClassName","props","currentTheme","context","_cnArgs","_oldClassName","_oldTheme","constructor"],"mappings":"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","file":"cn.js","sourcesContent":["import PropTypes from 'prop-types';\nimport bem from 'bem-cn-fast';\n\n/**\n * BEM class name factory.\n *\n * @typedef {Function} BemCn\n * @param {String|Object} [elementOrMods] Element name or hash object with mods.\n * @param {Object} [mods] Hash object with mods.\n * @returns {String}\n */\n\n/**\n * Extends `BemCn` factory with additional class proxy and theme.\n *\n * @param {BemCn} cn BemCn instance.\n * @param {String} className Additional class name.\n * @param {String} theme Theme name.\n * @returns {BemCn}\n */\nfunction getFunctionCn(cn, className, theme) {\n    let resultCn = function (...args) {\n        let blockSelector = false;\n\n        if (typeof args[0] === 'undefined' || typeof args[0] === 'object') {\n            if (args.length === 0) {\n                if (process.env.NODE_ENV !== 'production') {\n                    // eslint-disable-next-line no-console\n                    console.warn('Performance: cn() without arguments should be called without parentheses');\n                }\n\n                args.push({});\n            }\n\n            args[0].theme = theme;\n            blockSelector = true;\n        }\n\n        return cn.apply(cn, args) + ((blockSelector && className) ? ` ${className}` : '');\n    };\n\n    resultCn.toString = function () {\n        return cn({ theme }).toString() + (className ? ` ${className}` : '');\n    };\n\n    return resultCn;\n}\n\n/**\n * 1. Decorates `React.Component`. Extends `render` method for\n * apply as first argument `BemCn` instance that uses to\n * generate BEM class names.\n *\n * 2. Adds prop `theme`.\n *\n * 3. Adds prop `className` for provide additional `className`.\n *\n * @example\n * ```\n *     import cnDecorator from 'cn-decorator';\n *     const cn = cnDecorator.create(['on-color', 'on-white']);\n *\n *     \\@cn('my-block')\n *     class MyBlock extends React.Component {\n *          render(cn) {\n *              return (\n *                  <div className={ cn } />\n *              );\n *          }\n *     }\n * ```\n *\n * Render result:\n *\n * ```\n *     <MyBlock />\n *     // <div class=\"my-block my-block_theme_on-color\"></div>\n *\n *     <MyBlock theme=\"on-white\" />\n *     // <div class=\"my-block my-block_theme_on-white\"></div>\n *\n *     <MyBlock className=\"additional-class\" />\n *     // <div class=\"my-block my-block_theme_on-color additional-class\"></div>\n * ```\n *\n * You can `CnDecorator` as dependency injector to flexibale change component\\'s composition.\n *\n * ```\n * // phone-input.jsx\n *\n * import cn from 'cn-decorator';\n * import Input from 'input';\n * import './input.css';\n *\n * // Source component with base BEM class name `phone-input` and composed `Input` component.\n * \\@cn('phone-input', Input)\n * class PhoneInput extends React.Component {\n *     render(cn, Input) {\n *          return <Input className={ cn } />;\n *     }\n * }\n *\n * // my-phone-input.jsx\n *\n * import cn from 'cn-decorator'\n * import PhoneInput from 'phone-input';\n * import MyInput from 'my-input';\n * import './my-phone-input.css';\n *\n * // Extended component with base class name `my-phone-input`.\n * // Uses custom `MyInput` component inside.\n * \\@cn('my-phone-input', MyInput)\n * class MyPhoneInput extends PhoneInput {}\n * ```\n *\n * @typedef {Function} CnDecorator\n * @param {String} componentName Base CSS class name.\n * @param {...Function} [components] DI components.\n * @returns {Function}\n */\n\n/**\n * Factory `CnDecorator`.\n *\n * @param {Array.<String>} [themes] Optional themes list. Uses first theme as default.\n * @returns {CnDecorator}\n */\nfunction create(themes) {\n    function cn(componentName, ...components) {\n        return function (target) {\n            target._cn = bem(componentName);\n            target._cnComponents = components;\n\n            if (!target.prototype.hasOwnProperty('render')) {\n                return;\n            }\n\n            if (target.prototype.render.length === 0 && process.env.NODE_ENV !== 'production') {\n                throw new Error(\n                    `Couldn't decorate ${componentName} because render method should contain at least one argument`\n                );\n            }\n\n            if (target.prototype.render.length >= 1) {\n                target.contextTypes = {\n                    ...target.contextTypes,\n                    theme: PropTypes.string\n                };\n\n                target.childContextTypes = {\n                    ...target.childContextTypes,\n                    theme: PropTypes.string\n                };\n\n                const originalRender = target.prototype.render;\n                target.prototype.render = function () {\n                    const currentClassName = this.props.className;\n                    const currentTheme = this.props.theme || this.context.theme || (themes && themes[0]);\n\n                    if (!this._cnArgs\n                        || this._oldClassName !== currentClassName\n                        || this._oldTheme !== currentTheme\n                    ) {\n                        this._cnArgs = [\n                            getFunctionCn(this.constructor._cn, currentClassName, currentTheme),\n                            ...this.constructor._cnComponents\n                        ];\n\n                        this._oldClassName = currentClassName;\n                        this._oldTheme = currentTheme;\n                    }\n                    return originalRender.apply(this, this._cnArgs);\n                };\n            }\n        };\n    }\n\n    cn.create = create;\n\n    return cn;\n}\n\nexport default create();\n"]}